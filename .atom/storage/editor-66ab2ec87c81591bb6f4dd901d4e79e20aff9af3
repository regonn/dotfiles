{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":790},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/regonn/docrails","buffers":[{"text":"~~Getting Started with Rails~~\nRailsを始めてみましょう\n==========================\n\n~~This guide covers getting up and running with Ruby on Rails.~~\n\n>\n>このガイドではRuby on Railsの立ち上げ方や運営について書いています。\n<<これでは\n\n~~After reading this guide, you will know:~~\n\n>このガイドを読み終えると次の内容を知ることができます：\n\n* ~~How to install Rails, create a new Rails application, and connect your~~\n  ~~application to a database.~~\n* ~~The general layout of a Rails application.~~\n* ~~The basic principles of MVC (Model, View, Controller) and RESTful design.~~\n* ~~How to quickly generate the starting pieces of a Rails application.~~\n>* Railsのインストールの仕方、新しいRailsアプリケーションの作り方、そしてあなたのアプリケーションのデータベースへの接続方法。\n>* 一般的なRailsアプリケーションのレイアウト。\n* MVC(Model, View, Controller)やRESTfulなデザインについての基本的な理論。\n* Railsアプリケーションを最初の部分を素早く作る方法\n\n--------------------------------------------------------------------------------\n\n~~Guide Assumptions~~\nガイドの前提\n-----------------\n\n~~This guide is designed for beginners who want to get started with a Rails~~\n~~application from scratch. It does not assume that you have any prior experience~~\n~~with Rails. However, to get the most out of it, you need to have some~~\n~~prerequisites installed:~~\n\nこのガイドはRailsアプリケーションを始めたい初心者向けに対象が設定されています。Railsを経験したことあるかは、ここでは求めていませんが、使いこなすには次の物をインストールしておいて下さい。\n\n* ~~The [Ruby](http://www.ruby-lang.org/en/downloads) language version 1.9.3 or newer.~~\n* ~~The [RubyGems](http://rubygems.org) packaging system, which is installed with Ruby~~\n  ~~versions 1.9 and later. To learn more about RubyGems, please read the [RubyGems Guides](http://guides.rubygems.org).~~\n* ~~A working installation of the [SQLite3 Database](http://www.sqlite.org).~~\n\n* Ruby バージョン 1.9.3以上\n* RubyGemパッケージシステム（Ruby 1.9以降なら一緒にインストールされています。）より詳しくRubyGemについて学ぶのであれば、こちらをご覧下さい。 [RubyGems Guides](http://guides.rubygems.org)\n* [SQLite3 Database](http://www.sqlite.org)の動作する環境\n\n~~Rails is a web application framework running on the Ruby programming language.~~\n~~If you have no prior experience with Ruby, you will find a very steep learning~~\n~~curve diving straight into Rails. There are several curated lists of online resources~~\n~~for learning Ruby:~~\n\nRailsはRuby言語上で実行されるウェブアプリケーションフレームワークです。もし、Rubyの経験が無いのであれば、あなたはRailsを行うことで急な学習曲線を見つけることでしょう。ここにオンラインでRubyを学ぶためのリストを書いておきます。\n\n* ~~[Official Ruby Programming Language website](https://www.ruby-lang.org/en/documentation/)~~\n* ~~[reSRC's List of Free Programming Books](http://resrc.io/list/10/list-of-free-programming-books/#ruby)~~\n\n* [公式Ruby言語ウェブサイト（日本語）](https://www.ruby-lang.org/ja/documentation/)\n* [reSRCの無料プログラミング本リスト(英語)](http://resrc.io/list/10/list-of-free-programming-books/#ruby)\n\n~~Be aware that some resources, while still excellent, cover versions of Ruby as old as~~\n~~1.6, and commonly 1.8, and will not include some syntax that you will see in day-to-day~~\n~~development with Rails.~~\n\n情報によっては、素晴らしいものもありますが、対応しているRubyのバージョンが1.6より古いか、一般的に1.8で、Railsを開発していくにあたって見かける表記について書かれていないことがありますので注意して下さい。\n\n~~What is Rails?~~\n\nRailsとは？\n--------------\n\n~~Rails is a web application development framework written in the Ruby language.~~\n~~It is designed to make programming web applications easier by making assumptions~~\n~~about what every developer needs to get started. It allows you to write less~~\n~~code while accomplishing more than many other languages and frameworks.~~\n~~Experienced Rails developers also report that it makes web application~~\n~~development more fun.~~\n\nRailsはRuby言語で書かれたウェブアプリケーション開発フレームワークです。このフレームワークは全ての開発者が構築する際に必要となるものを取り入れることで簡単にウェブアプリケーションを作ることができるように設計されています。多くの他の言語やフレームワークに比べて少ないコードで実装できます。Railsで開発している人はウェブアプリケーション開発がより楽しくなると言っています。\n\n~~Rails is opinionated software. It makes the assumption that there is the \"best\"~~\n~~way to do things, and it's designed to encourage that way - and in some cases to~~\n~~discourage alternatives. If you learn \"The Rails Way\" you'll probably discover a~~\n~~tremendous increase in productivity. If you persist in bringing old habits from~~\n~~other languages to your Rails development, and trying to use patterns you~~\n~~learned elsewhere, you may have a less happy experience.~~\n\nRailsは頑固なソフトウェアです。Railsは行うことにはベストな方法があると仮定して、その方法を奨励するように設計されていて、場合によっては古い\bものをやめさせるようにします。もしあなたが”The Rrails Way”を学ぶのならば、生産性が急激に増す発見をしていくでしょう。もしあなたが、他の言語の古い習慣に固執してRailsの開発をし、他で学んだパターンを使い続けるのであれば、楽しい経験を体験することは難しいです。\n\n~~The Rails philosophy includes two major guiding principles:~~\n\nRailsの哲学には２つの有名な理論があります：\n\n* **Don't Repeat Yourself:** DRY is a principle of software development which\n  states that \"Every piece of knowledge must have a single, unambiguous, authoritative\n  representation within a system.\" By not writing the same information over and over\n  again, our code is more maintainable, more extensible, and less buggy.\n* **Convention Over Configuration:** Rails has opinions about the best way to do many\n  things in a web application, and defaults to this set of conventions, rather than\n  require that you specify every minutiae through endless configuration files.\n\nCreating a New Rails Project\n----------------------------\n\nThe best way to use this guide is to follow each step as it happens, no code or\nstep needed to make this example application has been left out, so you can\nliterally follow along step by step. You can get the complete code\n[here](https://github.com/rails/docrails/tree/master/guides/code/getting_started).\n\nBy following along with this guide, you'll create a Rails project called\n`blog`, a\n(very) simple weblog. Before you can start building the application, you need to\nmake sure that you have Rails itself installed.\n\nTIP: The examples below use `$` to represent your terminal prompt in a UNIX-like OS,\nthough it may have been customized to appear differently. If you are using Windows,\nyour prompt will look something like `c:\\source_code>`\n\n### Installing Rails\n\nOpen up a command line prompt. On Mac OS X open Terminal.app, on Windows choose\n\"Run\" from your Start menu and type 'cmd.exe'. Any commands prefaced with a\ndollar sign `$` should be run in the command line. Verify that you have a\ncurrent version of Ruby installed:\n\nTIP. A number of tools exist to help you quickly install Ruby and Ruby\non Rails on your system. Windows users can use [Rails Installer](http://railsinstaller.org),\nwhile Mac OS X users can use [Tokaido](https://github.com/tokaido/tokaidoapp).\n\n```bash\n$ ruby -v\nruby 2.0.0p353\n```\n\nIf you don't have Ruby installed have a look at\n[ruby-lang.org](https://www.ruby-lang.org/en/installation/) for possible ways to\ninstall Ruby on your platform.\n\nMany popular UNIX-like OSes ship with an acceptable version of SQLite3. Windows\nusers and others can find installation instructions at [the SQLite3 website](http://www.sqlite.org).\nVerify that it is correctly installed and in your PATH:\n\n```bash\n$ sqlite3 --version\n```\n\nThe program should report its version.\n\nTo install Rails, use the `gem install` command provided by RubyGems:\n\n```bash\n$ gem install rails\n```\n\nTo verify that you have everything installed correctly, you should be able to\nrun the following:\n\n```bash\n$ rails --version\n```\n\nIf it says something like \"Rails 4.1.0\", you are ready to continue.\n\n### Creating the Blog Application\n\nRails comes with a number of scripts called generators that are designed to make\nyour development life easier by creating everything that's necessary to start\nworking on a particular task. One of these is the new application generator,\nwhich will provide you with the foundation of a fresh Rails application so that\nyou don't have to write it yourself.\n\nTo use this generator, open a terminal, navigate to a directory where you have\nrights to create files, and type:\n\n```bash\n$ rails new blog\n```\n\nThis will create a Rails application called Blog in a `blog` directory and\ninstall the gem dependencies that are already mentioned in `Gemfile` using\n`bundle install`.\n\nTIP: You can see all of the command line options that the Rails application\nbuilder accepts by running `rails new -h`.\n\nAfter you create the blog application, switch to its folder:\n\n```bash\n$ cd blog\n```\n\nThe `blog` directory has a number of auto-generated files and folders that make\nup the structure of a Rails application. Most of the work in this tutorial will\nhappen in the `app` folder, but here's a basic rundown on the function of each\nof the files and folders that Rails created by default:\n\n| File/Folder | Purpose |\n| ----------- | ------- |\n|app/|Contains the controllers, models, views, helpers, mailers and assets for your application. You'll focus on this folder for the remainder of this guide.|\n|bin/|Contains the rails script that starts your app and can contain other scripts you use to deploy or run your application.|\n|config/|Configure your application's routes, database, and more. This is covered in more detail in [Configuring Rails Applications](configuring.html).|\n|config.ru|Rack configuration for Rack based servers used to start the application.|\n|db/|Contains your current database schema, as well as the database migrations.|\n|Gemfile<br>Gemfile.lock|These files allow you to specify what gem dependencies are needed for your Rails application. These files are used by the Bundler gem. For more information about Bundler, see [the Bundler website](http://gembundler.com).|\n|lib/|Extended modules for your application.|\n|log/|Application log files.|\n|public/|The only folder seen by the world as-is. Contains static files and compiled assets.|\n|Rakefile|This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory of your application.|\n|README.rdoc|This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.|\n|test/|Unit tests, fixtures, and other test apparatus. These are covered in [Testing Rails Applications](testing.html).|\n|tmp/|Temporary files (like cache, pid, and session files).|\n|vendor/|A place for all third-party code. In a typical Rails application this includes vendored gems.|\n\nHello, Rails!\n-------------\n\nTo begin with, let's get some text up on screen quickly. To do this, you need to\nget your Rails application server running.\n\n### Starting up the Web Server\n\nYou actually have a functional Rails application already. To see it, you need to\nstart a web server on your development machine. You can do this by running the\nfollowing in the `blog` directory:\n\n```bash\n$ rails server\n```\n\nTIP: Compiling CoffeeScript to JavaScript requires a JavaScript runtime and the\nabsence of a runtime will give you an `execjs` error. Usually Mac OS X and\nWindows come with a JavaScript runtime installed. Rails adds the `therubyracer`\ngem to the generated `Gemfile` in a commented line for new apps and you can\nuncomment if you need it. `therubyrhino` is the recommended runtime for JRuby\nusers and is added by default to the `Gemfile` in apps generated under JRuby.\nYou can investigate about all the supported runtimes at\n[ExecJS](https://github.com/sstephenson/execjs#readme).\n\nThis will fire up WEBrick, a web server distributed with Ruby by default. To see\nyour application in action, open a browser window and navigate to\n<http://localhost:3000>. You should see the Rails default information page:\n\n![Welcome aboard screenshot](images/getting_started/rails_welcome.png)\n\nTIP: To stop the web server, hit Ctrl+C in the terminal window where it's\nrunning. To verify the server has stopped you should see your command prompt\ncursor again. For most UNIX-like systems including Mac OS X this will be a\ndollar sign `$`. In development mode, Rails does not generally require you to\nrestart the server; changes you make in files will be automatically picked up by\nthe server.\n\nThe \"Welcome aboard\" page is the _smoke test_ for a new Rails application: it\nmakes sure that you have your software configured correctly enough to serve a\npage. You can also click on the _About your application's environment_ link to\nsee a summary of your application's environment.\n\n### Say \"Hello\", Rails\n\nTo get Rails saying \"Hello\", you need to create at minimum a _controller_ and a\n_view_.\n\nA controller's purpose is to receive specific requests for the application.\n_Routing_ decides which controller receives which requests. Often, there is more\nthan one route to each controller, and different routes can be served by\ndifferent _actions_. Each action's purpose is to collect information to provide\nit to a view.\n\nA view's purpose is to display this information in a human readable format. An\nimportant distinction to make is that it is the _controller_, not the view,\nwhere information is collected. The view should just display that information.\nBy default, view templates are written in a language called eRuby (Embedded\nRuby) which is processed by the request cycle in Rails before being sent to the\nuser.\n\nTo create a new controller, you will need to run the \"controller\" generator and\ntell it you want a controller called \"welcome\" with an action called \"index\",\njust like this:\n\n```bash\n$ rails generate controller welcome index\n```\n\nRails will create several files and a route for you.\n\n```bash\ncreate  app/controllers/welcome_controller.rb\n route  get 'welcome/index'\ninvoke  erb\ncreate    app/views/welcome\ncreate    app/views/welcome/index.html.erb\ninvoke  test_unit\ncreate    test/controllers/welcome_controller_test.rb\ninvoke  helper\ncreate    app/helpers/welcome_helper.rb\ninvoke    test_unit\ncreate      test/helpers/welcome_helper_test.rb\ninvoke  assets\ninvoke    coffee\ncreate      app/assets/javascripts/welcome.js.coffee\ninvoke    scss\ncreate      app/assets/stylesheets/welcome.css.scss\n```\n\nMost important of these are of course the controller, located at\n`app/controllers/welcome_controller.rb` and the view, located at\n`app/views/welcome/index.html.erb`.\n\nOpen the `app/views/welcome/index.html.erb` file in your text editor. Delete all\nof the existing code in the file, and replace it with the following single line\nof code:\n\n```html\n<h1>Hello, Rails!</h1>\n```\n\n### Setting the Application Home Page\n\nNow that we have made the controller and view, we need to tell Rails when we\nwant \"Hello, Rails!\" to show up. In our case, we want it to show up when we\nnavigate to the root URL of our site, <http://localhost:3000>. At the moment,\n\"Welcome aboard\" is occupying that spot.\n\nNext, you have to tell Rails where your actual home page is located.\n\nOpen the file `config/routes.rb` in your editor.\n\n```ruby\nRails.application.routes.draw do\n  get 'welcome/index'\n\n  # The priority is based upon order of creation:\n  # first created -> highest priority.\n  #\n  # You can have the root of your site routed with \"root\"\n  # root 'welcome#index'\n  #\n  # ...\n```\n\nThis is your application's _routing file_ which holds entries in a special DSL\n(domain-specific language) that tells Rails how to connect incoming requests to\ncontrollers and actions. This file contains many sample routes on commented\nlines, and one of them actually shows you how to connect the root of your site\nto a specific controller and action. Find the line beginning with `root` and\nuncomment it. It should look something like the following:\n\n```ruby\nroot 'welcome#index'\n```\n\n`root 'welcome#index'` tells Rails to map requests to the root of the\napplication to the welcome controller's index action and `get 'welcome/index'`\ntells Rails to map requests to <http://localhost:3000/welcome/index> to the\nwelcome controller's index action. This was created earlier when you ran the\ncontroller generator (`rails generate controller welcome index`).\n\nLaunch the web server again if you stopped it to generate the controller (`rails\nserver`) and navigate to <http://localhost:3000> in your browser. You'll see the\n\"Hello, Rails!\" message you put into `app/views/welcome/index.html.erb`,\nindicating that this new route is indeed going to `WelcomeController`'s `index`\naction and is rendering the view correctly.\n\nTIP: For more information about routing, refer to [Rails Routing from the Outside In](routing.html).\n\nGetting Up and Running\n----------------------\n\nNow that you've seen how to create a controller, an action and a view, let's\ncreate something with a bit more substance.\n\nIn the Blog application, you will now create a new _resource_. A resource is the\nterm used for a collection of similar objects, such as articles, people or\nanimals.\nYou can create, read, update and destroy items for a resource and these\noperations are referred to as _CRUD_ operations.\n\nRails provides a `resources` method which can be used to declare a standard REST\nresource. Here's what `config/routes.rb` should look like after the\n_article resource_ is declared.\n\n```ruby\nRails.application.routes.draw do\n\n  resources :articles\n\n  root 'welcome#index'\nend\n```\n\nIf you run `rake routes`, you'll see that it has defined routes for all the\nstandard RESTful actions.  The meaning of the prefix column (and other columns)\nwill be seen later, but for now notice that Rails has inferred the\nsingular form `article` and makes meaningful use of the distinction.\n\n```bash\n$ rake routes\n      Prefix Verb   URI Pattern                  Controller#Action\n    articles GET    /articles(.:format)          articles#index\n             POST   /articles(.:format)          articles#create\n new_article GET    /articles/new(.:format)      articles#new\nedit_article GET    /articles/:id/edit(.:format) articles#edit\n     article GET    /articles/:id(.:format)      articles#show\n             PATCH  /articles/:id(.:format)      articles#update\n             PUT    /articles/:id(.:format)      articles#update\n             DELETE /articles/:id(.:format)      articles#destroy\n        root GET    /                            welcome#index\n```\n\nIn the next section, you will add the ability to create new articles in your\napplication and be able to view them. This is the \"C\" and the \"R\" from CRUD:\ncreation and reading. The form for doing this will look like this:\n\n![The new article form](images/getting_started/new_article.png)\n\nIt will look a little basic for now, but that's ok. We'll look at improving the\nstyling for it afterwards.\n\n### Laying down the ground work\n\nFirstly, you need a place within the application to create a new article. A\ngreat place for that would be at `/articles/new`. With the route already\ndefined, requests can now be made to `/articles/new` in the application.\nNavigate to <http://localhost:3000/articles/new> and you'll see a routing\nerror:\n\n![Another routing error, uninitialized constant ArticlesController](images/getting_started/routing_error_no_controller.png)\n\nThis error occurs because the route needs to have a controller defined in order\nto serve the request. The solution to this particular problem is simple: create\na controller called `ArticlesController`. You can do this by running this\ncommand:\n\n```bash\n$ rails g controller articles\n```\n\nIf you open up the newly generated `app/controllers/articles_controller.rb`\nyou'll see a fairly empty controller:\n\n```ruby\nclass ArticlesController < ApplicationController\nend\n```\n\nA controller is simply a class that is defined to inherit from\n`ApplicationController`.\nIt's inside this class that you'll define methods that will become the actions\nfor this controller. These actions will perform CRUD operations on the articles\nwithin our system.\n\nNOTE: There are `public`, `private` and `protected` methods in Ruby,\nbut only `public` methods can be actions for controllers.\nFor more details check out [Programming Ruby](http://www.ruby-doc.org/docs/ProgrammingRuby/).\n\nIf you refresh <http://localhost:3000/articles/new> now, you'll get a new error:\n\n![Unknown action new for ArticlesController!](images/getting_started/unknown_action_new_for_articles.png)\n\nThis error indicates that Rails cannot find the `new` action inside the\n`ArticlesController` that you just generated. This is because when controllers\nare generated in Rails they are empty by default, unless you tell it\nyour wanted actions during the generation process.\n\nTo manually define an action inside a controller, all you need to do is to\ndefine a new method inside the controller. Open\n`app/controllers/articles_controller.rb` and inside the `ArticlesController`\nclass, define a `new` method so that the controller now looks like this:\n\n```ruby\nclass ArticlesController < ApplicationController\n  def new\n  end\nend\n```\n\nWith the `new` method defined in `ArticlesController`, if you refresh\n<http://localhost:3000/articles/new> you'll see another error:\n\n![Template is missing for articles/new]\n(images/getting_started/template_is_missing_articles_new.png)\n\nYou're getting this error now because Rails expects plain actions like this one\nto have views associated with them to display their information. With no view\navailable, Rails errors out.\n\nIn the above image, the bottom line has been truncated. Let's see what the full\nthing looks like:\n\n<blockquote>\nMissing template articles/new, application/new with {locale:[:en], formats:[:html], handlers:[:erb, :builder, :coffee]}. Searched in: * \"/path/to/blog/app/views\"\n</blockquote>\n\nThat's quite a lot of text! Let's quickly go through and understand what each\npart of it does.\n\nThe first part identifies what template is missing. In this case, it's the\n`articles/new` template. Rails will first look for this template. If not found,\nthen it will attempt to load a template called `application/new`. It looks for\none here because the `ArticlesController` inherits from `ApplicationController`.\n\nThe next part of the message contains a hash. The `:locale` key in this hash\nsimply indicates what spoken language template should be retrieved. By default,\nthis is the English - or \"en\" - template. The next key, `:formats` specifies the\nformat of template to be served in response. The default format is `:html`, and\nso Rails is looking for an HTML template. The final key, `:handlers`, is telling\nus what _template handlers_ could be used to render our template. `:erb` is most\ncommonly used for HTML templates, `:builder` is used for XML templates, and\n`:coffee` uses CoffeeScript to build JavaScript templates.\n\nThe final part of this message tells us where Rails has looked for the templates.\nTemplates within a basic Rails application like this are kept in a single\nlocation, but in more complex applications it could be many different paths.\n\nThe simplest template that would work in this case would be one located at\n`app/views/articles/new.html.erb`. The extension of this file name is key: the\nfirst extension is the _format_ of the template, and the second extension is the\n_handler_ that will be used. Rails is attempting to find a template called\n`articles/new` within `app/views` for the application. The format for this\ntemplate can only be `html` and the handler must be one of `erb`, `builder` or\n`coffee`. Because you want to create a new HTML form, you will be using the `ERB`\nlanguage. Therefore the file should be called `articles/new.html.erb` and needs\nto be located inside the `app/views` directory of the application.\n\nGo ahead now and create a new file at `app/views/articles/new.html.erb` and\nwrite this content in it:\n\n```html\n<h1>New Article</h1>\n```\n\nWhen you refresh <http://localhost:3000/articles/new> you'll now see that the\npage has a title. The route, controller, action and view are now working\nharmoniously! It's time to create the form for a new article.\n\n### The first form\n\nTo create a form within this template, you will use a <em>form\nbuilder</em>. The primary form builder for Rails is provided by a helper\nmethod called `form_for`. To use this method, add this code into\n`app/views/articles/new.html.erb`:\n\n```html+erb\n<%= form_for :article do |f| %>\n  <p>\n    <%= f.label :title %><br>\n    <%= f.text_field :title %>\n  </p>\n\n  <p>\n    <%= f.label :text %><br>\n    <%= f.text_area :text %>\n  </p>\n\n  <p>\n    <%= f.submit %>\n  </p>\n<% end %>\n```\n\nIf you refresh the page now, you'll see the exact same form as in the example.\nBuilding forms in Rails is really just that easy!\n\nWhen you call `form_for`, you pass it an identifying object for this\nform. In this case, it's the symbol `:article`. This tells the `form_for`\nhelper what this form is for. Inside the block for this method, the\n`FormBuilder` object - represented by `f` - is used to build two labels and two\ntext fields, one each for the title and text of an article. Finally, a call to\n`submit` on the `f` object will create a submit button for the form.\n\nThere's one problem with this form though. If you inspect the HTML that is\ngenerated, by viewing the source of the page, you will see that the `action`\nattribute for the form is pointing at `/articles/new`. This is a problem because\nthis route goes to the very page that you're on right at the moment, and that\nroute should only be used to display the form for a new article.\n\nThe form needs to use a different URL in order to go somewhere else.\nThis can be done quite simply with the `:url` option of `form_for`.\nTypically in Rails, the action that is used for new form submissions\nlike this is called \"create\", and so the form should be pointed to that action.\n\nEdit the `form_for` line inside `app/views/articles/new.html.erb` to look like\nthis:\n\n```html+erb\n<%= form_for :article, url: articles_path do |f| %>\n```\n\nIn this example, the `articles_path` helper is passed to the `:url` option.\nTo see what Rails will do with this, we look back at the output of\n`rake routes`:\n\n```bash\n$ rake routes\n      Prefix Verb   URI Pattern                  Controller#Action\n    articles GET    /articles(.:format)          articles#index\n             POST   /articles(.:format)          articles#create\n new_article GET    /articles/new(.:format)      articles#new\nedit_article GET    /articles/:id/edit(.:format) articles#edit\n     article GET    /articles/:id(.:format)      articles#show\n             PATCH  /articles/:id(.:format)      articles#update\n             PUT    /articles/:id(.:format)      articles#update\n             DELETE /articles/:id(.:format)      articles#destroy\n        root GET    /                            welcome#index\n```\n\nThe `articles_path` helper tells Rails to point the form to the URI Pattern\nassociated with the `articles` prefix; and the form will (by default) send a\n`POST` request to that route. This is associated with the `create` action of\nthe current controller, the `ArticlesController`.\n\nWith the form and its associated route defined, you will be able to fill in the\nform and then click the submit button to begin the process of creating a new\narticle, so go ahead and do that. When you submit the form, you should see a\nfamiliar error:\n\n![Unknown action create for ArticlesController]\n(images/getting_started/unknown_action_create_for_articles.png)\n\nYou now need to create the `create` action within the `ArticlesController` for\nthis to work.\n\n### Creating articles\n\nTo make the \"Unknown action\" go away, you can define a `create` action within\nthe `ArticlesController` class in `app/controllers/articles_controller.rb`,\nunderneath the `new` action, as shown:\n\n```ruby\nclass ArticlesController < ApplicationController\n  def new\n  end\n\n  def create\n  end\nend\n```\n\nIf you re-submit the form now, you'll see another familiar error: a template is\nmissing. That's ok, we can ignore that for now. What the `create` action should\nbe doing is saving our new article to the database.\n\nWhen a form is submitted, the fields of the form are sent to Rails as\n_parameters_. These parameters can then be referenced inside the controller\nactions, typically to perform a particular task. To see what these parameters\nlook like, change the `create` action to this:\n\n```ruby\ndef create\n  render plain: params[:article].inspect\nend\n```\n\nThe `render` method here is taking a very simple hash with a key of `plain` and\nvalue of `params[:article].inspect`. The `params` method is the object which\nrepresents the parameters (or fields) coming in from the form. The `params`\nmethod returns an `ActiveSupport::HashWithIndifferentAccess` object, which\nallows you to access the keys of the hash using either strings or symbols. In\nthis situation, the only parameters that matter are the ones from the form.\n\nIf you re-submit the form one more time you'll now no longer get the missing\ntemplate error. Instead, you'll see something that looks like the following:\n\n```ruby\n{\"title\"=>\"First article!\", \"text\"=>\"This is my first article.\"}\n```\n\nThis action is now displaying the parameters for the article that are coming in\nfrom the form. However, this isn't really all that helpful. Yes, you can see the\nparameters but nothing in particular is being done with them.\n\n### Creating the Article model\n\nModels in Rails use a singular name, and their corresponding database tables\nuse a plural name. Rails provides a generator for creating models, which most\nRails developers tend to use when creating new models. To create the new model,\nrun this command in your terminal:\n\n```bash\n$ rails generate model Article title:string text:text\n```\n\nWith that command we told Rails that we want a `Article` model, together\nwith a _title_ attribute of type string, and a _text_ attribute\nof type text. Those attributes are automatically added to the `articles`\ntable in the database and mapped to the `Article` model.\n\nRails responded by creating a bunch of files. For now, we're only interested\nin `app/models/article.rb` and `db/migrate/20140120191729_create_articles.rb`\n(your name could be a bit different). The latter is responsible for creating\nthe database structure, which is what we'll look at next.\n\nTIP: Active Record is smart enough to automatically map column names to model\nattributes, which means you don't have to declare attributes inside Rails\nmodels, as that will be done automatically by Active Record.\n\n### Running a Migration\n\nAs we've just seen, `rails generate model` created a _database migration_ file\ninside the `db/migrate` directory. Migrations are Ruby classes that are\ndesigned to make it simple to create and modify database tables. Rails uses\nrake commands to run migrations, and it's possible to undo a migration after\nit's been applied to your database. Migration filenames include a timestamp to\nensure that they're processed in the order that they were created.\n\nIf you look in the `db/migrate/20140120191729_create_articles.rb` file (remember,\nyours will have a slightly different name), here's what you'll find:\n\n```ruby\nclass CreateArticles < ActiveRecord::Migration\n  def change\n    create_table :articles do |t|\n      t.string :title\n      t.text :text\n\n      t.timestamps\n    end\n  end\nend\n```\n\nThe above migration creates a method named `change` which will be called when\nyou run this migration. The action defined in this method is also reversible,\nwhich means Rails knows how to reverse the change made by this migration,\nin case you want to reverse it later. When you run this migration it will create\nan `articles` table with one string column and a text column. It also creates\ntwo timestamp fields to allow Rails to track article creation and update times.\n\nTIP: For more information about migrations, refer to [Rails Database Migrations]\n(migrations.html).\n\nAt this point, you can use a rake command to run the migration:\n\n```bash\n$ rake db:migrate\n```\n\nRails will execute this migration command and tell you it created the Articles\ntable.\n\n```bash\n==  CreateArticles: migrating ==================================================\n-- create_table(:articles)\n   -> 0.0019s\n==  CreateArticles: migrated (0.0020s) =========================================\n```\n\nNOTE. Because you're working in the development environment by default, this\ncommand will apply to the database defined in the `development` section of your\n`config/database.yml` file. If you would like to execute migrations in another\nenvironment, for instance in production, you must explicitly pass it when\ninvoking the command: `rake db:migrate RAILS_ENV=production`.\n\n### Saving data in the controller\n\nBack in `ArticlesController`, we need to change the `create` action\nto use the new `Article` model to save the data in the database.\nOpen `app/controllers/articles_controller.rb` and change the `create` action to\nlook like this:\n\n```ruby\ndef create\n  @article = Article.new(params[:article])\n\n  @article.save\n  redirect_to @article\nend\n```\n\nHere's what's going on: every Rails model can be initialized with its\nrespective attributes, which are automatically mapped to the respective\ndatabase columns. In the first line we do just that (remember that\n`params[:article]` contains the attributes we're interested in). Then,\n`@article.save` is responsible for saving the model in the database. Finally,\nwe redirect the user to the `show` action, which we'll define later.\n\nTIP: As we'll see later, `@article.save` returns a boolean indicating whether\nthe article was saved or not.\n\nIf you now go to <http://localhost:3000/articles/new> you'll *almost* be able\nto create an article. Try it! You should get an error that looks like this:\n\n![Forbidden attributes for new article]\n(images/getting_started/forbidden_attributes_for_new_article.png)\n\nRails has several security features that help you write secure applications,\nand you're running into one of them now. This one is called `[strong_parameters]\n(http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters)`,\nwhich requires us to tell Rails exactly which parameters are allowed into our\ncontroller actions.\n\nWhy do you have to bother? The ability to grab and automatically assign all\ncontroller parameters to your model in one shot makes the programmer's job\neasier, but this convenience also allows malicious use. What if a request to\nthe server was crafted to look like a new article form submit but also included\nextra fields with values that violated your applications integrity? They would\nbe 'mass assigned' into your model and then into the database along with the\ngood stuff - potentially breaking your application or worse.\n\nWe have to whitelist our controller parameters to prevent wrongful mass\nassignment. In this case, we want to both allow and require the `title` and\n`text` parameters for valid use of `create`. The syntax for this introduces\n`require` and `permit`. The change will involve one line in the `create` action:\n\n```ruby\n  @article = Article.new(params.require(:article).permit(:title, :text))\n```\n\nThis is often factored out into its own method so it can be reused by multiple\nactions in the same controller, for example `create` and `update`. Above and\nbeyond mass assignment issues, the method is often made `private` to make sure\nit can't be called outside its intended context. Here is the result:\n\n```ruby\ndef create\n  @article = Article.new(article_params)\n\n  @article.save\n  redirect_to @article\nend\n\nprivate\n  def article_params\n    params.require(:article).permit(:title, :text)\n  end\n```\n\nTIP: For more information, refer to the reference above and\n[this blog article about Strong Parameters]\n(http://weblog.rubyonrails.org/2012/3/21/strong-parameters/).\n\n### Showing Articles\n\nIf you submit the form again now, Rails will complain about not finding the\n`show` action. That's not very useful though, so let's add the `show` action\nbefore proceeding.\n\nAs we have seen in the output of `rake routes`, the route for `show` action is\nas follows:\n\n```\narticle GET    /articles/:id(.:format)      articles#show\n```\n\nThe special syntax `:id` tells rails that this route expects an `:id`\nparameter, which in our case will be the id of the article.\n\nAs we did before, we need to add the `show` action in\n`app/controllers/articles_controller.rb` and its respective view.\n\nNOTE: A frequent practice is to place the standard CRUD actions in each\ncontroller in the following order: `index`, `show`, `new`, `edit`, `create`, `update`\nand `destroy`. You may use any order you choose, but keep in mind that these\nare public methods; as mentioned earlier in this guide, they must be placed\nbefore any private or protected method in the controller in order to work.\n\nGiven that, let's add the `show` action, as follows:\n\n```ruby\nclass ArticlesController < ApplicationController\n  def show\n    @article = Article.find(params[:id])\n  end\n\n  def new\n  end\n\n  # snipped for brevity\n```\n\nA couple of things to note. We use `Article.find` to find the article we're\ninterested in, passing in `params[:id]` to get the `:id` parameter from the\nrequest. We also use an instance variable (prefixed by `@`) to hold a\nreference to the article object. We do this because Rails will pass all instance\nvariables to the view.\n\nNow, create a new file `app/views/articles/show.html.erb` with the following\ncontent:\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n```\n\nWith this change, you should finally be able to create new articles.\nVisit <http://localhost:3000/articles/new> and give it a try!\n\n![Show action for articles](images/getting_started/show_action_for_articles.png)\n\n### Listing all articles\n\nWe still need a way to list all our articles, so let's do that.\nThe route for this as per output of `rake routes` is:\n\n```\narticles GET    /articles(.:format)          articles#index\n```\n\nAdd the corresponding `index` action for that route inside the\n`ArticlesController` in the `app/controllers/articles_controller.rb` file.\nWhen we write an `index` action, the usual practice is to place it as the\nfirst method in the controller. Let's do it:\n\n```ruby\nclass ArticlesController < ApplicationController\n  def index\n    @articles = Article.all\n  end\n\n  def show\n    @article = Article.find(params[:id])\n  end\n\n  def new\n  end\n\n  # snipped for brevity\n```\n\nAnd then finally, add the view for this action, located at\n`app/views/articles/index.html.erb`:\n\n```html+erb\n<h1>Listing articles</h1>\n\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Text</th>\n  </tr>\n\n  <% @articles.each do |article| %>\n    <tr>\n      <td><%= article.title %></td>\n      <td><%= article.text %></td>\n    </tr>\n  <% end %>\n</table>\n```\n\nNow if you go to `http://localhost:3000/articles` you will see a list of all the\narticles that you have created.\n\n### Adding links\n\nYou can now create, show, and list articles. Now let's add some links to\nnavigate through pages.\n\nOpen `app/views/welcome/index.html.erb` and modify it as follows:\n\n```html+erb\n<h1>Hello, Rails!</h1>\n<%= link_to 'My Blog', controller: 'articles' %>\n```\n\nThe `link_to` method is one of Rails' built-in view helpers. It creates a\nhyperlink based on text to display and where to go - in this case, to the path\nfor articles.\n\nLet's add links to the other views as well, starting with adding this\n\"New Article\" link to `app/views/articles/index.html.erb`, placing it above the\n`<table>` tag:\n\n```erb\n<%= link_to 'New article', new_article_path %>\n```\n\nThis link will allow you to bring up the form that lets you create a new article.\n\nNow, add another link in `app/views/articles/new.html.erb`, underneath the\nform, to go back to the `index` action:\n\n```erb\n<%= form_for :article, url: articles_path do |f| %>\n  ...\n<% end %>\n\n<%= link_to 'Back', articles_path %>\n```\n\nFinally, add a link to the `app/views/articles/show.html.erb` template to\ngo back to the `index` action as well, so that people who are viewing a single\narticle can go back and view the whole list again:\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n\n<%= link_to 'Back', articles_path %>\n```\n\nTIP: If you want to link to an action in the same controller, you don't need to\nspecify the `:controller` option, as Rails will use the current controller by\ndefault.\n\nTIP: In development mode (which is what you're working in by default), Rails\nreloads your application with every browser request, so there's no need to stop\nand restart the web server when a change is made.\n\n### Adding Some Validation\n\nThe model file, `app/models/article.rb` is about as simple as it can get:\n\n```ruby\nclass Article < ActiveRecord::Base\nend\n```\n\nThere isn't much to this file - but note that the `Article` class inherits from\n`ActiveRecord::Base`. Active Record supplies a great deal of functionality to\nyour Rails models for free, including basic database CRUD (Create, Read, Update,\nDestroy) operations, data validation, as well as sophisticated search support\nand the ability to relate multiple models to one another.\n\nRails includes methods to help you validate the data that you send to models.\nOpen the `app/models/article.rb` file and edit it:\n\n```ruby\nclass Article < ActiveRecord::Base\n  validates :title, presence: true,\n                    length: { minimum: 5 }\nend\n```\n\nThese changes will ensure that all articles have a title that is at least five\ncharacters long. Rails can validate a variety of conditions in a model,\nincluding the presence or uniqueness of columns, their format, and the\nexistence of associated objects. Validations are covered in detail in [Active\nRecord Validations](active_record_validations.html)\n\nWith the validation now in place, when you call `@article.save` on an invalid\narticle, it will return `false`. If you open\n`app/controllers/articles_controller.rb` again, you'll notice that we don't\ncheck the result of calling `@article.save` inside the `create` action.\nIf `@article.save` fails in this situation, we need to show the form back to the\nuser. To do this, change the `new` and `create` actions inside\n`app/controllers/articles_controller.rb` to these:\n\n```ruby\ndef new\n  @article = Article.new\nend\n\ndef create\n  @article = Article.new(article_params)\n\n  if @article.save\n    redirect_to @article\n  else\n    render 'new'\n  end\nend\n\nprivate\n  def article_params\n    params.require(:article).permit(:title, :text)\n  end\n```\n\nThe `new` action is now creating a new instance variable called `@article`, and\nyou'll see why that is in just a few moments.\n\nNotice that inside the `create` action we use `render` instead of `redirect_to`\nwhen `save` returns `false`. The `render` method is used so that the `@article`\nobject is passed back to the `new` template when it is rendered. This rendering\nis done within the same request as the form submission, whereas the\n`redirect_to` will tell the browser to issue another request.\n\nIf you reload\n<http://localhost:3000/articles/new> and\ntry to save an article without a title, Rails will send you back to the\nform, but that's not very useful. You need to tell the user that\nsomething went wrong. To do that, you'll modify\n`app/views/articles/new.html.erb` to check for error messages:\n\n```html+erb\n<%= form_for :article, url: articles_path do |f| %>\n\n  <% if @article.errors.any? %>\n    <div id=\"error_explanation\">\n      <h2>\n        <%= pluralize(@article.errors.count, \"error\") %> prohibited\n        this article from being saved:\n      </h2>\n      <ul>\n        <% @article.errors.full_messages.each do |msg| %>\n          <li><%= msg %></li>\n        <% end %>\n      </ul>\n    </div>\n  <% end %>\n\n  <p>\n    <%= f.label :title %><br>\n    <%= f.text_field :title %>\n  </p>\n\n  <p>\n    <%= f.label :text %><br>\n    <%= f.text_area :text %>\n  </p>\n\n  <p>\n    <%= f.submit %>\n  </p>\n\n<% end %>\n\n<%= link_to 'Back', articles_path %>\n```\n\nA few things are going on. We check if there are any errors with\n`@article.errors.any?`, and in that case we show a list of all\nerrors with `@article.errors.full_messages`.\n\n`pluralize` is a rails helper that takes a number and a string as its\narguments. If the number is greater than one, the string will be automatically\npluralized.\n\nThe reason why we added `@article = Article.new` in the `ArticlesController` is\nthat otherwise `@article` would be `nil` in our view, and calling\n`@article.errors.any?` would throw an error.\n\nTIP: Rails automatically wraps fields that contain an error with a div\nwith class `field_with_errors`. You can define a css rule to make them\nstandout.\n\nNow you'll get a nice error message when saving an article without title when\nyou attempt to do just that on the new article form\n[(http://localhost:3000/articles/new)](http://localhost:3000/articles/new).\n\n![Form With Errors](images/getting_started/form_with_errors.png)\n\n### Updating Articles\n\nWe've covered the \"CR\" part of CRUD. Now let's focus on the \"U\" part, updating\narticles.\n\nThe first step we'll take is adding an `edit` action to the `ArticlesController`,\ngenerally between the `new` and `create` actions, as shown:\n\n```ruby\ndef new\n  @article = Article.new\nend\n\ndef edit\n  @article = Article.find(params[:id])\nend\n\ndef create\n  @article = Article.new(article_params)\n\n  if @article.save\n    redirect_to @article\n  else\n    render 'new'\n  end\nend\n```\n\nThe view will contain a form similar to the one we used when creating\nnew articles. Create a file called `app/views/articles/edit.html.erb` and make\nit look as follows:\n\n```html+erb\n<h1>Editing article</h1>\n\n<%= form_for :article, url: article_path(@article), method: :patch do |f| %>\n\n  <% if @article.errors.any? %>\n    <div id=\"error_explanation\">\n      <h2>\n        <%= pluralize(@article.errors.count, \"error\") %> prohibited\n        this article from being saved:\n      </h2>\n      <ul>\n        <% @article.errors.full_messages.each do |msg| %>\n          <li><%= msg %></li>\n        <% end %>\n      </ul>\n    </div>\n  <% end %>\n\n  <p>\n    <%= f.label :title %><br>\n    <%= f.text_field :title %>\n  </p>\n\n  <p>\n    <%= f.label :text %><br>\n    <%= f.text_area :text %>\n  </p>\n\n  <p>\n    <%= f.submit %>\n  </p>\n\n<% end %>\n\n<%= link_to 'Back', articles_path %>\n```\n\nThis time we point the form to the `update` action, which is not defined yet\nbut will be very soon.\n\nThe `method: :patch` option tells Rails that we want this form to be submitted\nvia the `PATCH` HTTP method which is the HTTP method you're expected to use to\n**update** resources according to the REST protocol.\n\nThe first parameter of `form_for` can be an object, say, `@article` which would\ncause the helper to fill in the form with the fields of the object. Passing in a\nsymbol (`:article`) with the same name as the instance variable (`@article`)\nalso automagically leads to the same behavior. This is what is happening here.\nMore details can be found in [form_for documentation]\n(http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_for).\n\nNext, we need to create the `update` action in\n`app/controllers/articles_controller.rb`.\nAdd it between the `create` action and the `private` method:\n\n```ruby\ndef create\n  @article = Article.new(article_params)\n\n  if @article.save\n    redirect_to @article\n  else\n    render 'new'\n  end\nend\n\ndef update\n  @article = Article.find(params[:id])\n\n  if @article.update(article_params)\n    redirect_to @article\n  else\n    render 'edit'\n  end\nend\n\nprivate\n  def article_params\n    params.require(:article).permit(:title, :text)\n  end\n```\n\nThe new method, `update`, is used when you want to update a record\nthat already exists, and it accepts a hash containing the attributes\nthat you want to update. As before, if there was an error updating the\narticle we want to show the form back to the user.\n\nWe reuse the `article_params` method that we defined earlier for the create\naction.\n\nTIP: You don't need to pass all attributes to `update`. For\nexample, if you'd call `@article.update(title: 'A new title')`\nRails would only update the `title` attribute, leaving all other\nattributes untouched.\n\nFinally, we want to show a link to the `edit` action in the list of all the\narticles, so let's add that now to `app/views/articles/index.html.erb` to make\nit appear next to the \"Show\" link:\n\n```html+erb\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Text</th>\n    <th colspan=\"2\"></th>\n  </tr>\n\n  <% @articles.each do |article| %>\n    <tr>\n      <td><%= article.title %></td>\n      <td><%= article.text %></td>\n      <td><%= link_to 'Show', article_path(article) %></td>\n      <td><%= link_to 'Edit', edit_article_path(article) %></td>\n    </tr>\n  <% end %>\n</table>\n```\n\nAnd we'll also add one to the `app/views/articles/show.html.erb` template as\nwell, so that there's also an \"Edit\" link on an article's page. Add this at the\nbottom of the template:\n\n```html+erb\n...\n\n<%= link_to 'Back', articles_path %> |\n<%= link_to 'Edit', edit_article_path(@article) %>\n```\n\nAnd here's how our app looks so far:\n\n![Index action with edit link](images/getting_started/index_action_with_edit_link.png)\n\n### Using partials to clean up duplication in views\n\nOur `edit` page looks very similar to the `new` page; in fact, they\nboth share the same code for displaying the form. Let's remove this\nduplication by using a view partial. By convention, partial files are\nprefixed by an underscore.\n\nTIP: You can read more about partials in the\n[Layouts and Rendering in Rails](layouts_and_rendering.html) guide.\n\nCreate a new file `app/views/articles/_form.html.erb` with the following\ncontent:\n\n```html+erb\n<%= form_for @article do |f| %>\n\n  <% if @article.errors.any? %>\n    <div id=\"error_explanation\">\n      <h2>\n        <%= pluralize(@article.errors.count, \"error\") %> prohibited\n        this article from being saved:\n      </h2>\n      <ul>\n        <% @article.errors.full_messages.each do |msg| %>\n          <li><%= msg %></li>\n        <% end %>\n      </ul>\n    </div>\n  <% end %>\n\n  <p>\n    <%= f.label :title %><br>\n    <%= f.text_field :title %>\n  </p>\n\n  <p>\n    <%= f.label :text %><br>\n    <%= f.text_area :text %>\n  </p>\n\n  <p>\n    <%= f.submit %>\n  </p>\n\n<% end %>\n```\n\nEverything except for the `form_for` declaration remained the same.\nThe reason we can use this shorter, simpler `form_for` declaration\nto stand in for either of the other forms is that `@article` is a *resource*\ncorresponding to a full set of RESTful routes, and Rails is able to infer\nwhich URI and method to use.\nFor more information about this use of `form_for`, see [Resource-oriented style]\n(http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_for-label-Resource-oriented+style).\n\nNow, let's update the `app/views/articles/new.html.erb` view to use this new\npartial, rewriting it completely:\n\n```html+erb\n<h1>New article</h1>\n\n<%= render 'form' %>\n\n<%= link_to 'Back', articles_path %>\n```\n\nThen do the same for the `app/views/articles/edit.html.erb` view:\n\n```html+erb\n<h1>Edit article</h1>\n\n<%= render 'form' %>\n\n<%= link_to 'Back', articles_path %>\n```\n\n### Deleting Articles\n\nWe're now ready to cover the \"D\" part of CRUD, deleting articles from the\ndatabase. Following the REST convention, the route for\ndeleting articles as per output of `rake routes` is:\n\n```ruby\nDELETE /articles/:id(.:format)      articles#destroy\n```\n\nThe `delete` routing method should be used for routes that destroy\nresources. If this was left as a typical `get` route, it could be possible for\npeople to craft malicious URLs like this:\n\n```html\n<a href='http://example.com/articles/1/destroy'>look at this cat!</a>\n```\n\nWe use the `delete` method for destroying resources, and this route is mapped\nto the `destroy` action inside `app/controllers/articles_controller.rb`, which\ndoesn't exist yet. The `destroy` method is generally the last CRUD action in\nthe controller, and like the other public CRUD actions, it must be placed\nbefore any `private` or `protected` methods. Let's add it:\n\n```ruby\ndef destroy\n  @article = Article.find(params[:id])\n  @article.destroy\n\n  redirect_to articles_path\nend\n```\n\nThe complete `ArticlesController` in the\n`app/controllers/articles_controller.rb` file should now look like this:\n\n```ruby\nclass ArticlesController < ApplicationController\n  def index\n    @articles = Article.all\n  end\n\n  def show\n    @article = Article.find(params[:id])\n  end\n\n  def new\n    @article = Article.new\n  end\n\n  def edit\n    @article = Article.find(params[:id])\n  end\n\n  def create\n    @article = Article.new(article_params)\n\n    if @article.save\n      redirect_to @article\n    else\n      render 'new'\n    end\n  end\n\n  def update\n    @article = Article.find(params[:id])\n\n    if @article.update(article_params)\n      redirect_to @article\n    else\n      render 'edit'\n    end\n  end\n\n  def destroy\n    @article = Article.find(params[:id])\n    @article.destroy\n\n    redirect_to articles_path\n  end\n\n  private\n    def article_params\n      params.require(:article).permit(:title, :text)\n    end\nend\n```\n\nYou can call `destroy` on Active Record objects when you want to delete\nthem from the database. Note that we don't need to add a view for this\naction since we're redirecting to the `index` action.\n\nFinally, add a 'Destroy' link to your `index` action template\n(`app/views/articles/index.html.erb`) to wrap everything together.\n\n```html+erb\n<h1>Listing Articles</h1>\n<%= link_to 'New article', new_article_path %>\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Text</th>\n    <th colspan=\"3\"></th>\n  </tr>\n\n  <% @articles.each do |article| %>\n    <tr>\n      <td><%= article.title %></td>\n      <td><%= article.text %></td>\n      <td><%= link_to 'Show', article_path(article) %></td>\n      <td><%= link_to 'Edit', edit_article_path(article) %></td>\n      <td><%= link_to 'Destroy', article_path(article),\n              method: :delete,\n              data: { confirm: 'Are you sure?' } %></td>\n    </tr>\n  <% end %>\n</table>\n```\n\nHere we're using `link_to` in a different way. We pass the named route as the\nsecond argument, and then the options as another argument. The `:method` and\n`:'data-confirm'` options are used as HTML5 attributes so that when the link is\nclicked, Rails will first show a confirm dialog to the user, and then submit the\nlink with method `delete`.  This is done via the JavaScript file `jquery_ujs`\nwhich is automatically included into your application's layout\n(`app/views/layouts/application.html.erb`) when you generated the application.\nWithout this file, the confirmation dialog box wouldn't appear.\n\n![Confirm Dialog](images/getting_started/confirm_dialog.png)\n\nCongratulations, you can now create, show, list, update and destroy\narticles.\n\nTIP: In general, Rails encourages using resources objects instead of\ndeclaring routes manually. For more information about routing, see\n[Rails Routing from the Outside In](routing.html).\n\nAdding a Second Model\n---------------------\n\nIt's time to add a second model to the application. The second model will handle\ncomments on articles.\n\n### Generating a Model\n\nWe're going to see the same generator that we used before when creating\nthe `Article` model. This time we'll create a `Comment` model to hold\nreference of article comments. Run this command in your terminal:\n\n```bash\n$ rails generate model Comment commenter:string body:text article:references\n```\n\nThis command will generate four files:\n\n| File                                         | Purpose                                                                                                |\n| -------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| db/migrate/20140120201010_create_comments.rb | Migration to create the comments table in your database (your name will include a different timestamp) |\n| app/models/comment.rb                        | The Comment model                                                                                      |\n| test/models/comment_test.rb                  | Testing harness for the comments model                                                                 |\n| test/fixtures/comments.yml                   | Sample comments for use in testing                                                                     |\n\nFirst, take a look at `app/models/comment.rb`:\n\n```ruby\nclass Comment < ActiveRecord::Base\n  belongs_to :article\nend\n```\n\nThis is very similar to the `Article` model that you saw earlier. The difference\nis the line `belongs_to :article`, which sets up an Active Record _association_.\nYou'll learn a little about associations in the next section of this guide.\n\nIn addition to the model, Rails has also made a migration to create the\ncorresponding database table:\n\n```ruby\nclass CreateComments < ActiveRecord::Migration\n  def change\n    create_table :comments do |t|\n      t.string :commenter\n      t.text :body\n\n      # this line adds an integer column called `article_id`.\n      t.references :article, index: true\n\n      t.timestamps\n    end\n  end\nend\n```\n\nThe `t.references` line sets up a foreign key column for the association between\nthe two models. An index for this association is also created on this column.\nGo ahead and run the migration:\n\n```bash\n$ rake db:migrate\n```\n\nRails is smart enough to only execute the migrations that have not already been\nrun against the current database, so in this case you will just see:\n\n```bash\n==  CreateComments: migrating =================================================\n-- create_table(:comments)\n   -> 0.0115s\n==  CreateComments: migrated (0.0119s) ========================================\n```\n\n### Associating Models\n\nActive Record associations let you easily declare the relationship between two\nmodels. In the case of comments and articles, you could write out the\nrelationships this way:\n\n* Each comment belongs to one article.\n* One article can have many comments.\n\nIn fact, this is very close to the syntax that Rails uses to declare this\nassociation. You've already seen the line of code inside the `Comment` model\n(app/models/comment.rb) that makes each comment belong to an Article:\n\n```ruby\nclass Comment < ActiveRecord::Base\n  belongs_to :article\nend\n```\n\nYou'll need to edit `app/models/article.rb` to add the other side of the\nassociation:\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_many :comments\n  validates :title, presence: true,\n                    length: { minimum: 5 }\nend\n```\n\nThese two declarations enable a good bit of automatic behavior. For example, if\nyou have an instance variable `@article` containing an article, you can retrieve\nall the comments belonging to that article as an array using\n`@article.comments`.\n\nTIP: For more information on Active Record associations, see the [Active Record\nAssociations](association_basics.html) guide.\n\n### Adding a Route for Comments\n\nAs with the `welcome` controller, we will need to add a route so that Rails\nknows where we would like to navigate to see `comments`. Open up the\n`config/routes.rb` file again, and edit it as follows:\n\n```ruby\nresources :articles do\n  resources :comments\nend\n```\n\nThis creates `comments` as a _nested resource_ within `articles`. This is\nanother part of capturing the hierarchical relationship that exists between\narticles and comments.\n\nTIP: For more information on routing, see the [Rails Routing](routing.html)\nguide.\n\n### Generating a Controller\n\nWith the model in hand, you can turn your attention to creating a matching\ncontroller. Again, we'll use the same generator we used before:\n\n```bash\n$ rails generate controller Comments\n```\n\nThis creates six files and one empty directory:\n\n| File/Directory                               | Purpose                                  |\n| -------------------------------------------- | ---------------------------------------- |\n| app/controllers/comments_controller.rb       | The Comments controller                  |\n| app/views/comments/                          | Views of the controller are stored here  |\n| test/controllers/comments_controller_test.rb | The test for the controller              |\n| app/helpers/comments_helper.rb               | A view helper file                       |\n| test/helpers/comments_helper_test.rb         | The test for the helper                  |\n| app/assets/javascripts/comment.js.coffee     | CoffeeScript for the controller          |\n| app/assets/stylesheets/comment.css.scss      | Cascading style sheet for the controller |\n\nLike with any blog, our readers will create their comments directly after\nreading the article, and once they have added their comment, will be sent back\nto the article show page to see their comment now listed. Due to this, our\n`CommentsController` is there to provide a method to create comments and delete\nspam comments when they arrive.\n\nSo first, we'll wire up the Article show template\n(`app/views/articles/show.html.erb`) to let us make a new comment:\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n\n<h2>Add a comment:</h2>\n<%= form_for([@article, @article.comments.build]) do |f| %>\n  <p>\n    <%= f.label :commenter %><br>\n    <%= f.text_field :commenter %>\n  </p>\n  <p>\n    <%= f.label :body %><br>\n    <%= f.text_area :body %>\n  </p>\n  <p>\n    <%= f.submit %>\n  </p>\n<% end %>\n\n<%= link_to 'Back', articles_path %> |\n<%= link_to 'Edit', edit_article_path(@article) %>\n```\n\nThis adds a form on the `Article` show page that creates a new comment by\ncalling the `CommentsController` `create` action. The `form_for` call here uses\nan array, which will build a nested route, such as `/articles/1/comments`.\n\nLet's wire up the `create` in `app/controllers/comments_controller.rb`:\n\n```ruby\nclass CommentsController < ApplicationController\n  def create\n    @article = Article.find(params[:article_id])\n    @comment = @article.comments.create(comment_params)\n    redirect_to article_path(@article)\n  end\n\n  private\n    def comment_params\n      params.require(:comment).permit(:commenter, :body)\n    end\nend\n```\n\nYou'll see a bit more complexity here than you did in the controller for\narticles. That's a side-effect of the nesting that you've set up. Each request\nfor a comment has to keep track of the article to which the comment is attached,\nthus the initial call to the `find` method of the `Article` model to get the\narticle in question.\n\nIn addition, the code takes advantage of some of the methods available for an\nassociation. We use the `create` method on `@article.comments` to create and\nsave the comment. This will automatically link the comment so that it belongs to\nthat particular article.\n\nOnce we have made the new comment, we send the user back to the original article\nusing the `article_path(@article)` helper. As we have already seen, this calls\nthe `show` action of the `ArticlesController` which in turn renders the\n`show.html.erb` template. This is where we want the comment to show, so let's\nadd that to the `app/views/articles/show.html.erb`.\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n\n<h2>Comments</h2>\n<% @article.comments.each do |comment| %>\n  <p>\n    <strong>Commenter:</strong>\n    <%= comment.commenter %>\n  </p>\n\n  <p>\n    <strong>Comment:</strong>\n    <%= comment.body %>\n  </p>\n<% end %>\n\n<h2>Add a comment:</h2>\n<%= form_for([@article, @article.comments.build]) do |f| %>\n  <p>\n    <%= f.label :commenter %><br>\n    <%= f.text_field :commenter %>\n  </p>\n  <p>\n    <%= f.label :body %><br>\n    <%= f.text_area :body %>\n  </p>\n  <p>\n    <%= f.submit %>\n  </p>\n<% end %>\n\n<%= link_to 'Edit Article', edit_article_path(@article) %> |\n<%= link_to 'Back to Articles', articles_path %>\n```\n\nNow you can add articles and comments to your blog and have them show up in the\nright places.\n\n![Article with Comments](images/getting_started/article_with_comments.png)\n\nRefactoring\n-----------\n\nNow that we have articles and comments working, take a look at the\n`app/views/articles/show.html.erb` template. It is getting long and awkward. We\ncan use partials to clean it up.\n\n### Rendering Partial Collections\n\nFirst, we will make a comment partial to extract showing all the comments for\nthe article. Create the file `app/views/comments/_comment.html.erb` and put the\nfollowing into it:\n\n```html+erb\n<p>\n  <strong>Commenter:</strong>\n  <%= comment.commenter %>\n</p>\n\n<p>\n  <strong>Comment:</strong>\n  <%= comment.body %>\n</p>\n```\n\nThen you can change `app/views/articles/show.html.erb` to look like the\nfollowing:\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n\n<h2>Comments</h2>\n<%= render @article.comments %>\n\n<h2>Add a comment:</h2>\n<%= form_for([@article, @article.comments.build]) do |f| %>\n  <p>\n    <%= f.label :commenter %><br>\n    <%= f.text_field :commenter %>\n  </p>\n  <p>\n    <%= f.label :body %><br>\n    <%= f.text_area :body %>\n  </p>\n  <p>\n    <%= f.submit %>\n  </p>\n<% end %>\n\n<%= link_to 'Edit Article', edit_article_path(@article) %> |\n<%= link_to 'Back to Articles', articles_path %>\n```\n\nThis will now render the partial in `app/views/comments/_comment.html.erb` once\nfor each comment that is in the `@article.comments` collection. As the `render`\nmethod iterates over the `@article.comments` collection, it assigns each\ncomment to a local variable named the same as the partial, in this case\n`comment` which is then available in the partial for us to show.\n\n### Rendering a Partial Form\n\nLet us also move that new comment section out to its own partial. Again, you\ncreate a file `app/views/comments/_form.html.erb` containing:\n\n```html+erb\n<%= form_for([@article, @article.comments.build]) do |f| %>\n  <p>\n    <%= f.label :commenter %><br>\n    <%= f.text_field :commenter %>\n  </p>\n  <p>\n    <%= f.label :body %><br>\n    <%= f.text_area :body %>\n  </p>\n  <p>\n    <%= f.submit %>\n  </p>\n<% end %>\n```\n\nThen you make the `app/views/articles/show.html.erb` look like the following:\n\n```html+erb\n<p>\n  <strong>Title:</strong>\n  <%= @article.title %>\n</p>\n\n<p>\n  <strong>Text:</strong>\n  <%= @article.text %>\n</p>\n\n<h2>Comments</h2>\n<%= render @article.comments %>\n\n<h2>Add a comment:</h2>\n<%= render \"comments/form\" %>\n\n<%= link_to 'Edit Article', edit_article_path(@article) %> |\n<%= link_to 'Back to Articles', articles_path %>\n```\n\nThe second render just defines the partial template we want to render,\n`comments/form`. Rails is smart enough to spot the forward slash in that\nstring and realize that you want to render the `_form.html.erb` file in\nthe `app/views/comments` directory.\n\nThe `@article` object is available to any partials rendered in the view because\nwe defined it as an instance variable.\n\nDeleting Comments\n-----------------\n\nAnother important feature of a blog is being able to delete spam comments. To do\nthis, we need to implement a link of some sort in the view and a `destroy`\naction in the `CommentsController`.\n\nSo first, let's add the delete link in the\n`app/views/comments/_comment.html.erb` partial:\n\n```html+erb\n<p>\n  <strong>Commenter:</strong>\n  <%= comment.commenter %>\n</p>\n\n<p>\n  <strong>Comment:</strong>\n  <%= comment.body %>\n</p>\n\n<p>\n  <%= link_to 'Destroy Comment', [comment.article, comment],\n               method: :delete,\n               data: { confirm: 'Are you sure?' } %>\n</p>\n```\n\nClicking this new \"Destroy Comment\" link will fire off a `DELETE\n/articles/:article_id/comments/:id` to our `CommentsController`, which can then\nuse this to find the comment we want to delete, so let's add a `destroy` action\nto our controller (`app/controllers/comments_controller.rb`):\n\n```ruby\nclass CommentsController < ApplicationController\n  def create\n    @article = Article.find(params[:article_id])\n    @comment = @article.comments.create(comment_params)\n    redirect_to article_path(@article)\n  end\n\n  def destroy\n    @article = Article.find(params[:article_id])\n    @comment = @article.comments.find(params[:id])\n    @comment.destroy\n    redirect_to article_path(@article)\n  end\n\n  private\n    def comment_params\n      params.require(:comment).permit(:commenter, :body)\n    end\nend\n```\n\nThe `destroy` action will find the article we are looking at, locate the comment\nwithin the `@article.comments` collection, and then remove it from the\ndatabase and send us back to the show action for the article.\n\n\n### Deleting Associated Objects\n\nIf you delete an article, its associated comments will also need to be\ndeleted, otherwise they would simply occupy space in the database. Rails allows\nyou to use the `dependent` option of an association to achieve this. Modify the\nArticle model, `app/models/article.rb`, as follows:\n\n```ruby\nclass Article < ActiveRecord::Base\n  has_many :comments, dependent: :destroy\n  validates :title, presence: true,\n                    length: { minimum: 5 }\nend\n```\n\nSecurity\n--------\n\n### Basic Authentication\n\nIf you were to publish your blog online, anyone would be able to add, edit and\ndelete articles or delete comments.\n\nRails provides a very simple HTTP authentication system that will work nicely in\nthis situation.\n\nIn the `ArticlesController` we need to have a way to block access to the\nvarious actions if the person is not authenticated. Here we can use the Rails\n`http_basic_authenticate_with` method, which allows access to the requested\naction if that method allows it.\n\nTo use the authentication system, we specify it at the top of our\n`ArticlesController` in `app/controllers/articles_controller.rb`. In our case,\nwe want the user to be authenticated on every action except `index` and `show`,\nso we write that:\n\n```ruby\nclass ArticlesController < ApplicationController\n\n  http_basic_authenticate_with name: \"dhh\", password: \"secret\", except: [:index, :show]\n\n  def index\n    @articles = Article.all\n  end\n\n  # snipped for brevity\n```\n\nWe also want to allow only authenticated users to delete comments, so in the\n`CommentsController` (`app/controllers/comments_controller.rb`) we write:\n\n```ruby\nclass CommentsController < ApplicationController\n\n  http_basic_authenticate_with name: \"dhh\", password: \"secret\", only: :destroy\n\n  def create\n    @article = Article.find(params[:article_id])\n    # ...\n  end\n\n  # snipped for brevity\n```\n\nNow if you try to create a new article, you will be greeted with a basic HTTP\nAuthentication challenge\n\n![Basic HTTP Authentication Challenge](images/getting_started/challenge.png)\n\nOther authentication methods are available for Rails applications. Two popular\nauthentication add-ons for Rails are the\n[Devise](https://github.com/plataformatec/devise) rails engine and\nthe [Authlogic](https://github.com/binarylogic/authlogic) gem,\nalong with a number of others.\n\n\n### Other Security Considerations\n\nSecurity, especially in web applications, is a broad and detailed area. Security\nin your Rails application is covered in more depth in\nThe [Ruby on Rails Security Guide](security.html)\n\n\nWhat's Next?\n------------\n\nNow that you've seen your first Rails application, you should feel free to\nupdate it and experiment on your own. But you don't have to do everything\nwithout help. As you need assistance getting up and running with Rails, feel\nfree to consult these support resources:\n\n* The [Ruby on Rails guides](index.html)\n* The [Ruby on Rails Tutorial](http://railstutorial.org/book)\n* The [Ruby on Rails mailing list](http://groups.google.com/group/rubyonrails-talk)\n* The [#rubyonrails](irc://irc.freenode.net/#rubyonrails) channel on irc.freenode.net\n\nRails also comes with built-in help that you can generate using the rake\ncommand-line utility:\n\n* Running `rake doc:guides` will put a full copy of the Rails Guides in the\n  `doc/guides` folder of your application. Open `doc/guides/index.html` in your\n  web browser to explore the Guides.\n* Running `rake doc:rails` will put a full copy of the API documentation for\n  Rails in the `doc/api` folder of your application. Open `doc/api/index.html`\n  in your web browser to explore the API documentation.\n\nTIP: To be able to generate the Rails Guides locally with the `doc:guides` rake\ntask you need to install the RedCloth gem. Add it to your `Gemfile` and run\n`bundle install` and you're ready to go.\n\nConfiguration Gotchas\n---------------------\n\nThe easiest way to work with Rails is to store all external data as UTF-8. If\nyou don't, Ruby libraries and Rails will often be able to convert your native\ndata into UTF-8, but this doesn't always work reliably, so you're better off\nensuring that all external data is UTF-8.\n\nIf you have made a mistake in this area, the most common symptom is a black\ndiamond with a question mark inside appearing in the browser. Another common\nsymptom is characters like \"Ã¼\" appearing instead of \"ü\". Rails takes a number\nof internal steps to mitigate common causes of these problems that can be\nautomatically detected and corrected. However, if you have external data that is\nnot stored as UTF-8, it can occasionally result in these kinds of issues that\ncannot be automatically detected by Rails and corrected.\n\nTwo very common sources of data that are not UTF-8:\n\n* Your text editor: Most text editors (such as TextMate), default to saving\n  files as UTF-8. If your text editor does not, this can result in special\n  characters that you enter in your templates (such as é) to appear as a diamond\n  with a question mark inside in the browser. This also applies to your i18n\n  translation files. Most editors that do not already default to UTF-8 (such as\n  some versions of Dreamweaver) offer a way to change the default to UTF-8. Do\n  so.\n* Your database: Rails defaults to converting data from your database into UTF-8\n  at the boundary. However, if your database is not using UTF-8 internally, it\n  may not be able to store all characters that your users enter. For instance,\n  if your database is using Latin-1 internally, and your user enters a Russian,\n  Hebrew, or Japanese character, the data will be lost forever once it enters\n  the database. If possible, use UTF-8 as the internal storage of your database.\n","markers":{"markers":{"1":{"id":1,"range":[[21,1],[21,1]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":93,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[5,1]],"oldText":"","newText":"＞","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":true,"range":[[5,1],[5,1]]},"newParams":{"reversed":false,"range":[[5,0],[5,1]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[5,0],[5,1]]},"newParams":{"tailed":false,"range":[[5,1],[5,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[5,0],[5,1]],"newRange":[[5,0],[5,0]],"oldText":"＞","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[5,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,1]],"oldText":"","newText":"<","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[10,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[10,0],[10,0]],"newRange":[[10,0],[10,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[8,1],[8,1]],"newRange":[[8,1],[8,2]],"oldText":"","newText":"ｋ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,2],[8,2]]},"newParams":{"range":[[8,1],[8,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,2]]},"newParams":{"tailed":false,"range":[[8,2],[8,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,2]],"newRange":[[8,1],[8,2]],"oldText":"ｋ","newText":"こ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,2],[8,2]]},"newParams":{"range":[[8,1],[8,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,2]]},"newParams":{"tailed":false,"range":[[8,2],[8,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,2]],"newRange":[[8,1],[8,3]],"oldText":"こ","newText":"こｒ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,3],[8,3]]},"newParams":{"range":[[8,1],[8,3]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,3]]},"newParams":{"tailed":false,"range":[[8,3],[8,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,3]],"newRange":[[8,1],[8,3]],"oldText":"こｒ","newText":"これ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,3],[8,3]]},"newParams":{"range":[[8,1],[8,3]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,3]]},"newParams":{"tailed":false,"range":[[8,3],[8,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,3]],"newRange":[[8,1],[8,4]],"oldText":"これ","newText":"これｄ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,4],[8,4]]},"newParams":{"range":[[8,1],[8,4]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,4]]},"newParams":{"tailed":false,"range":[[8,4],[8,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,4]],"newRange":[[8,1],[8,4]],"oldText":"これｄ","newText":"これで","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,4],[8,4]]},"newParams":{"range":[[8,1],[8,4]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,4]]},"newParams":{"tailed":false,"range":[[8,4],[8,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,4]],"newRange":[[8,1],[8,5]],"oldText":"これで","newText":"これでｈ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,5],[8,5]]},"newParams":{"range":[[8,1],[8,5]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,5]]},"newParams":{"tailed":false,"range":[[8,5],[8,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,5]],"newRange":[[8,1],[8,5]],"oldText":"これでｈ","newText":"これでは","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,5],[8,5]]},"newParams":{"range":[[8,1],[8,5]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,5]]},"newParams":{"tailed":false,"range":[[8,5],[8,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,5]],"newRange":[[8,1],[8,1]],"oldText":"これでは","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,1]],"newRange":[[8,1],[8,5]],"oldText":"","newText":"これでは","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[8,1],[8,1]],"newRange":[[8,1],[8,2]],"oldText":"","newText":"＜","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,2],[8,2]]},"newParams":{"range":[[8,1],[8,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[8,1],[8,2]]},"newParams":{"tailed":false,"range":[[8,2],[8,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,2]],"newRange":[[8,1],[8,1]],"oldText":"＜","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[8,1],[8,1]],"newRange":[[8,1],[8,2]],"oldText":"","newText":"<","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":"＞","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[1,1],[1,1]]},"newParams":{"range":[[1,0],[1,1]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[1,0],[1,1]]},"newParams":{"tailed":false,"range":[[1,1],[1,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,1]],"newRange":[[1,0],[1,0]],"oldText":"＞","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":"い","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[1,1],[1,1]]},"newParams":{"range":[[1,0],[1,1]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[1,0],[1,1]]},"newParams":{"tailed":false,"range":[[1,1],[1,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,1]],"newRange":[[1,0],[1,2]],"oldText":"い","newText":"い＞","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[1,2],[1,2]]},"newParams":{"range":[[1,0],[1,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[1,0],[1,2]]},"newParams":{"tailed":false,"range":[[1,2],[1,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,2]],"newRange":[[1,0],[1,1]],"oldText":"い＞","newText":"い","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[1,1],[1,1]]},"newParams":{"range":[[1,0],[1,1]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[1,0],[1,1]]},"newParams":{"tailed":false,"range":[[1,1],[1,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,1]],"newRange":[[1,0],[1,0]],"oldText":"い","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,2]],"oldText":"","newText":"  ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[1,2],[1,2]]},"newParams":{"reversed":true,"range":[[1,0],[1,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,2]],"newRange":[[1,0],[1,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[1,0],[1,0]],"newRange":[[1,0],[1,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[1,1],[1,1]]},"newParams":{"range":[[1,0],[1,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[1,0],[1,1]],"newRange":[[1,0],[1,0]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[12,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[19,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[20,0],[20,0]],"newRange":[[20,0],[20,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/regonn/docrails/guides/source/getting_started.md","modifiedWhenLastPersisted":true,"digestWhenLastPersisted":"a76c55cfe3396a1078834af0767ba4ff7a1e9ddd","deserializer":"TextBuffer"},{"text":"A Guide to Testing Rails Applications\n=====================================\n\nThis guide covers built-in mechanisms in Rails for testing your application.\n>ここはこうなります\n\nAfter reading this guide, you will know:\n\n* Rails testing terminology.\n* How to write unit, functional, and integration tests for your application.\n* Other popular testing approaches and plugins.\n>jjj\n\n--------------------------------------------------------------------------------\n\nWhy Write Tests for your Rails Applications?\n--------------------------------------------\n\nRails makes it super easy to write your tests. It starts by producing skeleton test code while you are creating your models and controllers.\n\nBy simply running your Rails tests you can ensure your code adheres to the desired functionality even after some major code refactoring.\n\nRails tests can also simulate browser requests and thus you can test your application's response without having to test it through your browser.\n\nIntroduction to Testing\n-----------------------\n\nTesting support was woven into the Rails fabric from the beginning. It wasn't an \"oh! let's bolt on support for running tests because they're new and cool\" epiphany. Just about every Rails application interacts heavily with a database and, as a result, your tests will need a database to interact with as well. To write efficient tests, you'll need to understand how to set up this database and populate it with sample data.\n\n### The Test Environment\n\nBy default, every Rails application has three environments: development, test, and production. The database for each one of them is configured in `config/database.yml`.\n\nA dedicated test database allows you to set up and interact with test data in isolation. Tests can mangle test data with confidence, that won't touch the data in the development or production databases.\n\n### Rails Sets up for Testing from the Word Go\n\nRails creates a `test` folder for you as soon as you create a Rails project using `rails new` _application_name_. If you list the contents of this folder then you shall see:\n\n```bash\n$ ls -F test\ncontrollers/    helpers/        mailers/        test_helper.rb\nfixtures/       integration/    models/\n```\n\nThe `models` directory is meant to hold tests for your models, the `controllers` directory is meant to hold tests for your controllers and the `integration` directory is meant to hold tests that involve any number of controllers interacting.\n\nFixtures are a way of organizing test data; they reside in the `fixtures` folder.\n\nThe `test_helper.rb` file holds the default configuration for your tests.\n\n### The Low-Down on Fixtures\n\nFor good tests, you'll need to give some thought to setting up test data. In Rails, you can handle this by defining and customizing fixtures.\n\n#### What Are Fixtures?\n\n_Fixtures_ is a fancy word for sample data. Fixtures allow you to populate your testing database with predefined data before your tests run. Fixtures are database independent written in YAML. There is one file per model.\n\nYou'll find fixtures under your `test/fixtures` directory. When you run `rails generate model` to create a new model fixture stubs will be automatically created and placed in this directory.\n\n#### YAML\n\nYAML-formatted fixtures are a very human-friendly way to describe your sample data. These types of fixtures have the **.yml** file extension (as in `users.yml`).\n\nHere's a sample YAML fixture file:\n\n```yaml\n# lo & behold! I am a YAML comment!\ndavid:\n  name: David Heinemeier Hansson\n  birthday: 1979-10-15\n  profession: Systems development\n\nsteve:\n  name: Steve Ross Kellock\n  birthday: 1974-09-27\n  profession: guy with keyboard\n```\n\nEach fixture is given a name followed by an indented list of colon-separated key/value pairs. Records are typically separated by a blank space. You can place comments in a fixture file by using the # character in the first column. Keys which resemble YAML keywords such as 'yes' and 'no' are quoted so that the YAML Parser correctly interprets them.\n\nIf you are working with [associations](/association_basics.html), you can simply\ndefine a reference node between two different fixtures. Here's an example with\na belongs_to/has_many association:\n\n```yaml\n# In fixtures/categories.yml\nabout:\n  name: About\n\n# In fixtures/articles.yml\none:\n  title: Welcome to Rails!\n  body: Hello world!\n  category: about\n```\n\n#### ERB'in It Up\n\nERB allows you to embed Ruby code within templates. The YAML fixture format is pre-processed with ERB when Rails loads fixtures. This allows you to use Ruby to help you generate some sample data. For example, the following code generates a thousand users:\n\n```erb\n<% 1000.times do |n| %>\nuser_<%= n %>:\n  username: <%= \"user#{n}\" %>\n  email: <%= \"user#{n}@example.com\" %>\n<% end %>\n```\n\n#### Fixtures in Action\n\nRails by default automatically loads all fixtures from the `test/fixtures` folder for your models and controllers test. Loading involves three steps:\n\n* Remove any existing data from the table corresponding to the fixture\n* Load the fixture data into the table\n* Dump the fixture data into a variable in case you want to access it directly\n\n#### Fixtures are Active Record objects\n\nFixtures are instances of Active Record. As mentioned in point #3 above, you can access the object directly because it is automatically setup as a local variable of the test case. For example:\n\n```ruby\n# this will return the User object for the fixture named david\nusers(:david)\n\n# this will return the property for david called id\nusers(:david).id\n\n# one can also access methods available on the User class\nemail(david.girlfriend.email, david.location_tonight)\n```\n\nUnit Testing your Models\n------------------------\n\nIn Rails, models tests are what you write to test your models.\n\nFor this guide we will be using Rails _scaffolding_. It will create the model, a migration, controller and views for the new resource in a single operation. It will also create a full test suite following Rails best practices. I will be using examples from this generated code and will be supplementing it with additional examples where necessary.\n\nNOTE: For more information on Rails <i>scaffolding</i>, refer to [Getting Started with Rails](getting_started.html)\n\nWhen you use `rails generate scaffold`, for a resource among other things it creates a test stub in the `test/models` folder:\n\n```bash\n$ rails generate scaffold post title:string body:text\n...\ncreate  app/models/post.rb\ncreate  test/models/post_test.rb\ncreate  test/fixtures/posts.yml\n...\n```\n\nThe default test stub in `test/models/post_test.rb` looks like this:\n\n```ruby\nrequire 'test_helper'\n\nclass PostTest < ActiveSupport::TestCase\n  # test \"the truth\" do\n  #   assert true\n  # end\nend\n```\n\nA line by line examination of this file will help get you oriented to Rails testing code and terminology.\n\n```ruby\nrequire 'test_helper'\n```\n\nAs you know by now, `test_helper.rb` specifies the default configuration to run our tests. This is included with all the tests, so any methods added to this file are available to all your tests.\n\n```ruby\nclass PostTest < ActiveSupport::TestCase\n```\n\nThe `PostTest` class defines a _test case_ because it inherits from `ActiveSupport::TestCase`. `PostTest` thus has all the methods available from `ActiveSupport::TestCase`. You'll see those methods a little later in this guide.\n\nAny method defined within a class inherited from `MiniTest::Unit::TestCase`\n(which is the superclass of `ActiveSupport::TestCase`) that begins with `test` (case sensitive) is simply called a test. So, `test_password`, `test_valid_password` and `testValidPassword` all are legal test names and are run automatically when the test case is run.\n\nRails adds a `test` method that takes a test name and a block. It generates a normal `MiniTest::Unit` test with method names prefixed with `test_`. So,\n\n```ruby\ntest \"the truth\" do\n  assert true\nend\n```\n\nacts as if you had written\n\n```ruby\ndef test_the_truth\n  assert true\nend\n```\n\nonly the `test` macro allows a more readable test name. You can still use regular method definitions though.\n\nNOTE: The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though, the name may contain punctuation characters etc. That's because in Ruby technically any string may be a method name. Odd ones need `define_method` and `send` calls, but formally there's no restriction.\n\n```ruby\nassert true\n```\n\nThis line of code is called an _assertion_. An assertion is a line of code that evaluates an object (or expression) for expected results. For example, an assertion can check:\n\n* does this value = that value?\n* is this object nil?\n* does this line of code throw an exception?\n* is the user's password greater than 5 characters?\n\nEvery test contains one or more assertions. Only when all the assertions are successful will the test pass.\n\n### Maintaining the test database schema\n\nIn order to run your tests, your test database will need to have the current structure. The test helper checks whether your test database has any pending migrations. If so, it will try to load your `db/schema.rb` or `db/structure.sql` into the test database. If migrations are still pending, an error will be raised.\n\n### Running Tests\n\nRunning a test is as simple as invoking the file containing the test cases through `rake test` command.\n\n```bash\n$ rake test test/models/post_test.rb\n.\n\nFinished tests in 0.009262s, 107.9680 tests/s, 107.9680 assertions/s.\n\n1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n```\n\nYou can also run a particular test method from the test case by running the test and providing the `test method name`.\n\n```bash\n$ rake test test/models/post_test.rb test_the_truth\n.\n\nFinished tests in 0.009064s, 110.3266 tests/s, 110.3266 assertions/s.\n\n1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n```\n\nThis will run all test methods from the test case. Note that `test_helper.rb` is in the `test` directory, hence this directory needs to be added to the load path using the `-I` switch.\n\nThe `.` (dot) above indicates a passing test. When a test fails you see an `F`; when a test throws an error you see an `E` in its place. The last line of the output is the summary.\n\nTo see how a test failure is reported, you can add a failing test to the `post_test.rb` test case.\n\n```ruby\ntest \"should not save post without title\" do\n  post = Post.new\n  assert_not post.save\nend\n```\n\nLet us run this newly added test.\n\n```bash\n$ rake test test/models/post_test.rb test_should_not_save_post_without_title\nF\n\nFinished tests in 0.044632s, 22.4054 tests/s, 22.4054 assertions/s.\n\n  1) Failure:\ntest_should_not_save_post_without_title(PostTest) [test/models/post_test.rb:6]:\nFailed assertion, no message given.\n\n1 tests, 1 assertions, 1 failures, 0 errors, 0 skips\n```\n\nIn the output, `F` denotes a failure. You can see the corresponding trace shown under `1)` along with the name of the failing test. The next few lines contain the stack trace followed by a message which mentions the actual value and the expected value by the assertion. The default assertion messages provide just enough information to help pinpoint the error. To make the assertion failure message more readable, every assertion provides an optional message parameter, as shown here:\n\n```ruby\ntest \"should not save post without title\" do\n  post = Post.new\n  assert_not post.save, \"Saved the post without a title\"\nend\n```\n\nRunning this test shows the friendlier assertion message:\n\n```bash\n  1) Failure:\ntest_should_not_save_post_without_title(PostTest) [test/models/post_test.rb:6]:\nSaved the post without a title\n```\n\nNow to get this test to pass we can add a model level validation for the _title_ field.\n\n```ruby\nclass Post < ActiveRecord::Base\n  validates :title, presence: true\nend\n```\n\nNow the test should pass. Let us verify by running the test again:\n\n```bash\n$ rake test test/models/post_test.rb test_should_not_save_post_without_title\n.\n\nFinished tests in 0.047721s, 20.9551 tests/s, 20.9551 assertions/s.\n\n1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n```\n\nNow, if you noticed, we first wrote a test which fails for a desired functionality, then we wrote some code which adds the functionality and finally we ensured that our test passes. This approach to software development is referred to as _Test-Driven Development_ (TDD).\n\nTIP: Many Rails developers practice _Test-Driven Development_ (TDD). This is an excellent way to build up a test suite that exercises every part of your application. TDD is beyond the scope of this guide, but one place to start is with [15 TDD steps to create a Rails application](http://andrzejonsoftware.blogspot.com/2007/05/15-tdd-steps-to-create-rails.html).\n\nTo see how an error gets reported, here's a test containing an error:\n\n```ruby\ntest \"should report error\" do\n  # some_undefined_variable is not defined elsewhere in the test case\n  some_undefined_variable\n  assert true\nend\n```\n\nNow you can see even more output in the console from running the tests:\n\n```bash\n$ rake test test/models/post_test.rb test_should_report_error\nE\n\nFinished tests in 0.030974s, 32.2851 tests/s, 0.0000 assertions/s.\n\n  1) Error:\ntest_should_report_error(PostTest):\nNameError: undefined local variable or method `some_undefined_variable' for #<PostTest:0x007fe32e24afe0>\n    test/models/post_test.rb:10:in `block in <class:PostTest>'\n\n1 tests, 0 assertions, 0 failures, 1 errors, 0 skips\n```\n\nNotice the 'E' in the output. It denotes a test with error.\n\nNOTE: The execution of each test method stops as soon as any error or an assertion failure is encountered, and the test suite continues with the next method. All test methods are executed in alphabetical order.\n\nWhen a test fails you are presented with the corresponding backtrace. By default\nRails filters that backtrace and will only print lines relevant to your\napplication. This eliminates the framework noise and helps to focus on your\ncode. However there are situations when you want to see the full\nbacktrace. simply set the `BACKTRACE` environment variable to enable this\nbehavior:\n\n```bash\n$ BACKTRACE=1 rake test test/models/post_test.rb\n```\n\n### What to Include in Your Unit Tests\n\nIdeally, you would like to include a test for everything which could possibly break. It's a good practice to have at least one test for each of your validations and at least one test for every method in your model.\n\n### Available Assertions\n\nBy now you've caught a glimpse of some of the assertions that are available. Assertions are the worker bees of testing. They are the ones that actually perform the checks to ensure that things are going as planned.\n\nThere are a bunch of different types of assertions you can use.\nHere's an extract of the assertions you can use with `minitest`, the default testing library used by Rails. The `[msg]` parameter is an optional string message you can specify to make your test failure messages clearer. It's not required.\n\n| Assertion                                                        | Purpose |\n| ---------------------------------------------------------------- | ------- |\n| `assert( test, [msg] )`                                          | Ensures that `test` is true.|\n| `assert_not( test, [msg] )`                                      | Ensures that `test` is false.|\n| `assert_equal( expected, actual, [msg] )`                        | Ensures that `expected == actual` is true.|\n| `assert_not_equal( expected, actual, [msg] )`                    | Ensures that `expected != actual` is true.|\n| `assert_same( expected, actual, [msg] )`                         | Ensures that `expected.equal?(actual)` is true.|\n| `assert_not_same( expected, actual, [msg] )`                     | Ensures that `expected.equal?(actual)` is false.|\n| `assert_nil( obj, [msg] )`                                       | Ensures that `obj.nil?` is true.|\n| `assert_not_nil( obj, [msg] )`                                   | Ensures that `obj.nil?` is false.|\n| `assert_match( regexp, string, [msg] )`                          | Ensures that a string matches the regular expression.|\n| `assert_no_match( regexp, string, [msg] )`                       | Ensures that a string doesn't match the regular expression.|\n| `assert_in_delta( expecting, actual, [delta], [msg] )`           | Ensures that the numbers `expected` and `actual` are within `delta` of each other.|\n| `assert_not_in_delta( expecting, actual, [delta], [msg] )`       | Ensures that the numbers `expected` and `actual` are not within `delta` of each other.|\n| `assert_throws( symbol, [msg] ) { block }`                       | Ensures that the given block throws the symbol.|\n| `assert_raises( exception1, exception2, ... ) { block }`         | Ensures that the given block raises one of the given exceptions.|\n| `assert_nothing_raised( exception1, exception2, ... ) { block }` | Ensures that the given block doesn't raise one of the given exceptions.|\n| `assert_instance_of( class, obj, [msg] )`                        | Ensures that `obj` is an instance of `class`.|\n| `assert_not_instance_of( class, obj, [msg] )`                    | Ensures that `obj` is not an instance of `class`.|\n| `assert_kind_of( class, obj, [msg] )`                            | Ensures that `obj` is or descends from `class`.|\n| `assert_not_kind_of( class, obj, [msg] )`                        | Ensures that `obj` is not an instance of `class` and is not descending from it.|\n| `assert_respond_to( obj, symbol, [msg] )`                        | Ensures that `obj` responds to `symbol`.|\n| `assert_not_respond_to( obj, symbol, [msg] )`                    | Ensures that `obj` does not respond to `symbol`.|\n| `assert_operator( obj1, operator, [obj2], [msg] )`               | Ensures that `obj1.operator(obj2)` is true.|\n| `assert_not_operator( obj1, operator, [obj2], [msg] )`           | Ensures that `obj1.operator(obj2)` is false.|\n| `assert_send( array, [msg] )`                                    | Ensures that executing the method listed in `array[1]` on the object in `array[0]` with the parameters of `array[2 and up]` is true. This one is weird eh?|\n| `flunk( [msg] )`                                                 | Ensures failure. This is useful to explicitly mark a test that isn't finished yet.|\n\nBecause of the modular nature of the testing framework, it is possible to create your own assertions. In fact, that's exactly what Rails does. It includes some specialized assertions to make your life easier.\n\nNOTE: Creating your own assertions is an advanced topic that we won't cover in this tutorial.\n\n### Rails Specific Assertions\n\nRails adds some custom assertions of its own to the `test/unit` framework:\n\n| Assertion                                                                         | Purpose |\n| --------------------------------------------------------------------------------- | ------- |\n| `assert_difference(expressions, difference = 1, message = nil) {...}`             | Test numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.|\n| `assert_no_difference(expressions, message = nil, &amp;block)`                    | Asserts that the numeric result of evaluating an expression is not changed before and after invoking the passed in block.|\n| `assert_recognizes(expected_options, path, extras={}, message=nil)`               | Asserts that the routing of the given path was handled correctly and that the parsed options (given in the expected_options hash) match path. Basically, it asserts that Rails recognizes the route given by expected_options.|\n| `assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)` | Asserts that the provided options can be used to generate the provided path. This is the inverse of assert_recognizes. The extras parameter is used to tell the request the names and values of additional request parameters that would be in a query string. The message parameter allows you to specify a custom error message for assertion failures.|\n| `assert_response(type, message = nil)`                                            | Asserts that the response comes with a specific status code. You can specify `:success` to indicate 200-299, `:redirect` to indicate 300-399, `:missing` to indicate 404, or `:error` to match the 500-599 range. You can also pass an explicit status number or its symbolic equivalent. For more information, see [full list of status codes](http://rubydoc.info/github/rack/rack/master/Rack/Utils#HTTP_STATUS_CODES-constant) and how their [mapping](http://rubydoc.info/github/rack/rack/master/Rack/Utils#SYMBOL_TO_STATUS_CODE-constant) works.|\n| `assert_redirected_to(options = {}, message=nil)`                                 | Assert that the redirection options passed in match those of the redirect called in the latest action. This match can be partial, such that `assert_redirected_to(controller: \"weblog\")` will also match the redirection of `redirect_to(controller: \"weblog\", action: \"show\")` and so on. You can also pass named routes such as `assert_redirected_to root_path` and Active Record objects such as `assert_redirected_to @article`.|\n| `assert_template(expected = nil, message=nil)`                                    | Asserts that the request was rendered with the appropriate template file.|\n\nYou'll see the usage of some of these assertions in the next chapter.\n\nFunctional Tests for Your Controllers\n-------------------------------------\n\nIn Rails, testing the various actions of a single controller is called writing functional tests for that controller. Controllers handle the incoming web requests to your application and eventually respond with a rendered view.\n\n### What to Include in your Functional Tests\n\nYou should test for things such as:\n\n* was the web request successful?\n* was the user redirected to the right page?\n* was the user successfully authenticated?\n* was the correct object stored in the response template?\n* was the appropriate message displayed to the user in the view?\n\nNow that we have used Rails scaffold generator for our `Post` resource, it has already created the controller code and tests. You can take look at the file `posts_controller_test.rb` in the `test/controllers` directory.\n\nLet me take you through one such test, `test_should_get_index` from the file `posts_controller_test.rb`.\n\n```ruby\nclass PostsControllerTest < ActionController::TestCase\n  test \"should get index\" do\n    get :index\n    assert_response :success\n    assert_not_nil assigns(:posts)\n  end\nend\n```\n\nIn the `test_should_get_index` test, Rails simulates a request on the action called `index`, making sure the request was successful and also ensuring that it assigns a valid `posts` instance variable.\n\nThe `get` method kicks off the web request and populates the results into the response. It accepts 4 arguments:\n\n* The action of the controller you are requesting. This can be in the form of a string or a symbol.\n* An optional hash of request parameters to pass into the action (eg. query string parameters or post variables).\n* An optional hash of session variables to pass along with the request.\n* An optional hash of flash values.\n\nExample: Calling the `:show` action, passing an `id` of 12 as the `params` and setting a `user_id` of 5 in the session:\n\n```ruby\nget(:show, {'id' => \"12\"}, {'user_id' => 5})\n```\n\nAnother example: Calling the `:view` action, passing an `id` of 12 as the `params`, this time with no session, but with a flash message.\n\n```ruby\nget(:view, {'id' => '12'}, nil, {'message' => 'booya!'})\n```\n\nNOTE: If you try running `test_should_create_post` test from `posts_controller_test.rb` it will fail on account of the newly added model level validation and rightly so.\n\nLet us modify `test_should_create_post` test in `posts_controller_test.rb` so that all our test pass:\n\n```ruby\ntest \"should create post\" do\n  assert_difference('Post.count') do\n    post :create, post: {title: 'Some title'}\n  end\n\n  assert_redirected_to post_path(assigns(:post))\nend\n```\n\nNow you can try running all the tests and they should pass.\n\n### Available Request Types for Functional Tests\n\nIf you're familiar with the HTTP protocol, you'll know that `get` is a type of request. There are 6 request types supported in Rails functional tests:\n\n* `get`\n* `post`\n* `patch`\n* `put`\n* `head`\n* `delete`\n\nAll of request types are methods that you can use, however, you'll probably end up using the first two more often than the others.\n\nNOTE: Functional tests do not verify whether the specified request type should be accepted by the action. Request types in this context exist to make your tests more descriptive.\n\n### The Four Hashes of the Apocalypse\n\nAfter a request has been made using one of the 6 methods (`get`, `post`, etc.) and processed, you will have 4 Hash objects ready for use:\n\n* `assigns` - Any objects that are stored as instance variables in actions for use in views.\n* `cookies` - Any cookies that are set.\n* `flash` - Any objects living in the flash.\n* `session` - Any object living in session variables.\n\nAs is the case with normal Hash objects, you can access the values by referencing the keys by string. You can also reference them by symbol name, except for `assigns`. For example:\n\n```ruby\nflash[\"gordon\"]               flash[:gordon]\nsession[\"shmession\"]          session[:shmession]\ncookies[\"are_good_for_u\"]     cookies[:are_good_for_u]\n\n# Because you can't use assigns[:something] for historical reasons:\nassigns[\"something\"]          assigns(:something)\n```\n\n### Instance Variables Available\n\nYou also have access to three instance variables in your functional tests:\n\n* `@controller` - The controller processing the request\n* `@request` - The request\n* `@response` - The response\n\n### Setting Headers and CGI variables\n\n[HTTP headers](http://tools.ietf.org/search/rfc2616#section-5.3)\nand\n[CGI variables](http://tools.ietf.org/search/rfc3875#section-4.1)\ncan be set directly on the `@request` instance variable:\n\n```ruby\n# setting a HTTP Header\n@request.headers[\"Accept\"] = \"text/plain, text/html\"\nget :index # simulate the request with custom header\n\n# setting a CGI variable\n@request.headers[\"HTTP_REFERER\"] = \"http://example.com/home\"\npost :create # simulate the request with custom env variable\n```\n\n### Testing Templates and Layouts\n\nIf you want to make sure that the response rendered the correct template and layout, you can use the `assert_template`\nmethod:\n\n```ruby\ntest \"index should render correct template and layout\" do\n  get :index\n  assert_template :index\n  assert_template layout: \"layouts/application\"\nend\n```\n\nNote that you cannot test for template and layout at the same time, with one call to `assert_template` method.\nAlso, for the `layout` test, you can give a regular expression instead of a string, but using the string, makes\nthings clearer. On the other hand, you have to include the \"layouts\" directory name even if you save your layout\nfile in this standard layout directory. Hence,\n\n```ruby\nassert_template layout: \"application\"\n```\n\nwill not work.\n\nIf your view renders any partial, when asserting for the layout, you have to assert for the partial at the same time.\nOtherwise, assertion will fail.\n\nHence:\n\n```ruby\ntest \"new should render correct layout\" do\n  get :new\n  assert_template layout: \"layouts/application\", partial: \"_form\"\nend\n```\n\nis the correct way to assert for the layout when the view renders a partial with name `_form`. Omitting the `:partial` key in your `assert_template` call will complain.\n\n### A Fuller Functional Test Example\n\nHere's another example that uses `flash`, `assert_redirected_to`, and `assert_difference`:\n\n```ruby\ntest \"should create post\" do\n  assert_difference('Post.count') do\n    post :create, post: {title: 'Hi', body: 'This is my first post.'}\n  end\n  assert_redirected_to post_path(assigns(:post))\n  assert_equal 'Post was successfully created.', flash[:notice]\nend\n```\n\n### Testing Views\n\nTesting the response to your request by asserting the presence of key HTML elements and their content is a useful way to test the views of your application. The `assert_select` assertion allows you to do this by using a simple yet powerful syntax.\n\nNOTE: You may find references to `assert_tag` in other documentation, but this is now deprecated in favor of `assert_select`.\n\nThere are two forms of `assert_select`:\n\n`assert_select(selector, [equality], [message])` ensures that the equality condition is met on the selected elements through the selector. The selector may be a CSS selector expression (String), an expression with substitution values, or an `HTML::Selector` object.\n\n`assert_select(element, selector, [equality], [message])` ensures that the equality condition is met on all the selected elements through the selector starting from the _element_ (instance of `HTML::Node`) and its descendants.\n\nFor example, you could verify the contents on the title element in your response with:\n\n```ruby\nassert_select 'title', \"Welcome to Rails Testing Guide\"\n```\n\nYou can also use nested `assert_select` blocks. In this case the inner `assert_select` runs the assertion on the complete collection of elements selected by the outer `assert_select` block:\n\n```ruby\nassert_select 'ul.navigation' do\n  assert_select 'li.menu_item'\nend\n```\n\nAlternatively the collection of elements selected by the outer `assert_select` may be iterated through so that `assert_select` may be called separately for each element. Suppose for example that the response contains two ordered lists, each with four list elements then the following tests will both pass.\n\n```ruby\nassert_select \"ol\" do |elements|\n  elements.each do |element|\n    assert_select element, \"li\", 4\n  end\nend\n\nassert_select \"ol\" do\n  assert_select \"li\", 8\nend\n```\n\nThe `assert_select` assertion is quite powerful. For more advanced usage, refer to its [documentation](http://api.rubyonrails.org/classes/ActionDispatch/Assertions/SelectorAssertions.html).\n\n#### Additional View-Based Assertions\n\nThere are more assertions that are primarily used in testing views:\n\n| Assertion                                                 | Purpose |\n| --------------------------------------------------------- | ------- |\n| `assert_select_email`                                     | Allows you to make assertions on the body of an e-mail. |\n| `assert_select_encoded`                                   | Allows you to make assertions on encoded HTML. It does this by un-encoding the contents of each element and then calling the block with all the un-encoded elements.|\n| `css_select(selector)` or `css_select(element, selector)` | Returns an array of all the elements selected by the _selector_. In the second variant it first matches the base _element_ and tries to match the _selector_ expression on any of its children. If there are no matches both variants return an empty array.|\n\nHere's an example of using `assert_select_email`:\n\n```ruby\nassert_select_email do\n  assert_select 'small', 'Please click the \"Unsubscribe\" link if you want to opt-out.'\nend\n```\n\nIntegration Testing\n-------------------\n\nIntegration tests are used to test the interaction among any number of controllers. They are generally used to test important work flows within your application.\n\nUnlike Unit and Functional tests, integration tests have to be explicitly created under the 'test/integration' folder within your application. Rails provides a generator to create an integration test skeleton for you.\n\n```bash\n$ rails generate integration_test user_flows\n      exists  test/integration/\n      create  test/integration/user_flows_test.rb\n```\n\nHere's what a freshly-generated integration test looks like:\n\n```ruby\nrequire 'test_helper'\n\nclass UserFlowsTest < ActionDispatch::IntegrationTest\n  # test \"the truth\" do\n  #   assert true\n  # end\nend\n```\n\nIntegration tests inherit from `ActionDispatch::IntegrationTest`. This makes available some additional helpers to use in your integration tests. Also you need to explicitly include the fixtures to be made available to the test.\n\n### Helpers Available for Integration Tests\n\nIn addition to the standard testing helpers, there are some additional helpers available to integration tests:\n\n| Helper                                                             | Purpose |\n| ------------------------------------------------------------------ | ------- |\n| `https?`                                                           | Returns `true` if the session is mimicking a secure HTTPS request.|\n| `https!`                                                           | Allows you to mimic a secure HTTPS request.|\n| `host!`                                                            | Allows you to set the host name to use in the next request.|\n| `redirect?`                                                        | Returns `true` if the last request was a redirect.|\n| `follow_redirect!`                                                 | Follows a single redirect response.|\n| `request_via_redirect(http_method, path, [parameters], [headers])` | Allows you to make an HTTP request and follow any subsequent redirects.|\n| `post_via_redirect(path, [parameters], [headers])`                 | Allows you to make an HTTP POST request and follow any subsequent redirects.|\n| `get_via_redirect(path, [parameters], [headers])`                  | Allows you to make an HTTP GET request and follow any subsequent redirects.|\n| `patch_via_redirect(path, [parameters], [headers])`                | Allows you to make an HTTP PATCH request and follow any subsequent redirects.|\n| `put_via_redirect(path, [parameters], [headers])`                  | Allows you to make an HTTP PUT request and follow any subsequent redirects.|\n| `delete_via_redirect(path, [parameters], [headers])`               | Allows you to make an HTTP DELETE request and follow any subsequent redirects.|\n| `open_session`                                                     | Opens a new session instance.|\n\n### Integration Testing Examples\n\nA simple integration test that exercises multiple controllers:\n\n```ruby\nrequire 'test_helper'\n\nclass UserFlowsTest < ActionDispatch::IntegrationTest\n  fixtures :users\n\n  test \"login and browse site\" do\n    # login via https\n    https!\n    get \"/login\"\n    assert_response :success\n\n    post_via_redirect \"/login\", username: users(:david).username, password: users(:david).password\n    assert_equal '/welcome', path\n    assert_equal 'Welcome david!', flash[:notice]\n\n    https!(false)\n    get \"/posts/all\"\n    assert_response :success\n    assert assigns(:products)\n  end\nend\n```\n\nAs you can see the integration test involves multiple controllers and exercises the entire stack from database to dispatcher. In addition you can have multiple session instances open simultaneously in a test and extend those instances with assertion methods to create a very powerful testing DSL (domain-specific language) just for your application.\n\nHere's an example of multiple sessions and custom DSL in an integration test\n\n```ruby\nrequire 'test_helper'\n\nclass UserFlowsTest < ActionDispatch::IntegrationTest\n  fixtures :users\n\n  test \"login and browse site\" do\n\n    # User david logs in\n    david = login(:david)\n    # User guest logs in\n    guest = login(:guest)\n\n    # Both are now available in different sessions\n    assert_equal 'Welcome david!', david.flash[:notice]\n    assert_equal 'Welcome guest!', guest.flash[:notice]\n\n    # User david can browse site\n    david.browses_site\n    # User guest can browse site as well\n    guest.browses_site\n\n    # Continue with other assertions\n  end\n\n  private\n\n    module CustomDsl\n      def browses_site\n        get \"/products/all\"\n        assert_response :success\n        assert assigns(:products)\n      end\n    end\n\n    def login(user)\n      open_session do |sess|\n        sess.extend(CustomDsl)\n        u = users(user)\n        sess.https!\n        sess.post \"/login\", username: u.username, password: u.password\n        assert_equal '/welcome', sess.path\n        sess.https!(false)\n      end\n    end\nend\n```\n\nRake Tasks for Running your Tests\n---------------------------------\n\nYou don't need to set up and run your tests by hand on a test-by-test basis.\nRails comes with a number of commands to help in testing.\nThe table below lists all commands that come along in the default Rakefile\nwhen you initiate a Rails project.\n\n| Tasks                   | Description |\n| ----------------------- | ----------- |\n| `rake test`             | Runs all unit, functional and integration tests. You can also simply run `rake` as Rails will run all the tests by default |\n| `rake test:controllers` | Runs all the controller tests from `test/controllers` |\n| `rake test:functionals` | Runs all the functional tests from `test/controllers`, `test/mailers`, and `test/functional` |\n| `rake test:helpers`     | Runs all the helper tests from `test/helpers` |\n| `rake test:integration` | Runs all the integration tests from `test/integration` |\n| `rake test:mailers`     | Runs all the mailer tests from `test/mailers` |\n| `rake test:models`      | Runs all the model tests from `test/models` |\n| `rake test:units`       | Runs all the unit tests from `test/models`, `test/helpers`, and `test/unit` |\n| `rake test:all`         | Runs all tests quickly by merging all types and not resetting db |\n| `rake test:all:db`      | Runs all tests quickly by merging all types and resetting db |\n\n\nBrief Note About `MiniTest`\n-----------------------------\n\nRuby ships with a vast Standard Library for all common use-cases including testing. Ruby 1.8 provided `Test::Unit`, a framework for unit testing in Ruby. All the basic assertions discussed above are actually defined in `Test::Unit::Assertions`. The class `ActiveSupport::TestCase` which we have been using in our unit and functional tests extends `Test::Unit::TestCase`, allowing\nus to use all of the basic assertions in our tests.\n\nRuby 1.9 introduced `MiniTest`, an updated version of `Test::Unit` which provides a backwards compatible API for `Test::Unit`. You could also use `MiniTest` in Ruby 1.8 by installing the `minitest` gem.\n\nNOTE: For more information on `Test::Unit`, refer to [test/unit Documentation](http://ruby-doc.org/stdlib/libdoc/test/unit/rdoc/)\nFor more information on `MiniTest`, refer to [Minitest](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/minitest/unit/rdoc/)\n\nSetup and Teardown\n------------------\n\nIf you would like to run a block of code before the start of each test and another block of code after the end of each test you have two special callbacks for your rescue. Let's take note of this by looking at an example for our functional test in `Posts` controller:\n\n```ruby\nrequire 'test_helper'\n\nclass PostsControllerTest < ActionController::TestCase\n\n  # called before every single test\n  def setup\n    @post = posts(:one)\n  end\n\n  # called after every single test\n  def teardown\n    # as we are re-initializing @post before every test\n    # setting it to nil here is not essential but I hope\n    # you understand how you can use the teardown method\n    @post = nil\n  end\n\n  test \"should show post\" do\n    get :show, id: @post.id\n    assert_response :success\n  end\n\n  test \"should destroy post\" do\n    assert_difference('Post.count', -1) do\n      delete :destroy, id: @post.id\n    end\n\n    assert_redirected_to posts_path\n  end\n\nend\n```\n\nAbove, the `setup` method is called before each test and so `@post` is available for each of the tests. Rails implements `setup` and `teardown` as `ActiveSupport::Callbacks`. Which essentially means you need not only use `setup` and `teardown` as methods in your tests. You could specify them by using:\n\n* a block\n* a method (like in the earlier example)\n* a method name as a symbol\n* a lambda\n\nLet's see the earlier example by specifying `setup` callback by specifying a method name as a symbol:\n\n```ruby\nrequire 'test_helper'\n\nclass PostsControllerTest < ActionController::TestCase\n\n  # called before every single test\n  setup :initialize_post\n\n  # called after every single test\n  def teardown\n    @post = nil\n  end\n\n  test \"should show post\" do\n    get :show, id: @post.id\n    assert_response :success\n  end\n\n  test \"should update post\" do\n    patch :update, id: @post.id, post: {}\n    assert_redirected_to post_path(assigns(:post))\n  end\n\n  test \"should destroy post\" do\n    assert_difference('Post.count', -1) do\n      delete :destroy, id: @post.id\n    end\n\n    assert_redirected_to posts_path\n  end\n\n  private\n\n    def initialize_post\n      @post = posts(:one)\n    end\nend\n```\n\nTesting Routes\n--------------\n\nLike everything else in your Rails application, it is recommended that you test your routes. An example test for a route in the default `show` action of `Posts` controller above should look like:\n\n```ruby\ntest \"should route to post\" do\n  assert_routing '/posts/1', {controller: \"posts\", action: \"show\", id: \"1\"}\nend\n```\n\nTesting Your Mailers\n--------------------\n\nTesting mailer classes requires some specific tools to do a thorough job.\n\n### Keeping the Postman in Check\n\nYour mailer classes - like every other part of your Rails application - should be tested to ensure that it is working as expected.\n\nThe goals of testing your mailer classes are to ensure that:\n\n* emails are being processed (created and sent)\n* the email content is correct (subject, sender, body, etc)\n* the right emails are being sent at the right times\n\n#### From All Sides\n\nThere are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture.) In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.\n\n### Unit Testing\n\nIn order to test that your mailer is working as expected, you can use unit tests to compare the actual results of the mailer with pre-written examples of what should be produced.\n\n#### Revenge of the Fixtures\n\nFor the purposes of unit testing a mailer, fixtures are used to provide an example of how the output _should_ look. Because these are example emails, and not Active Record data like the other fixtures, they are kept in their own subdirectory apart from the other fixtures. The name of the directory within `test/fixtures` directly corresponds to the name of the mailer. So, for a mailer named `UserMailer`, the fixtures should reside in `test/fixtures/user_mailer` directory.\n\nWhen you generated your mailer, the generator creates stub fixtures for each of the mailers actions. If you didn't use the generator you'll have to make those files yourself.\n\n#### The Basic Test Case\n\nHere's a unit test to test a mailer named `UserMailer` whose action `invite` is used to send an invitation to a friend. It is an adapted version of the base test created by the generator for an `invite` action.\n\n```ruby\nrequire 'test_helper'\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Send the email, then test that it got queued\n    email = UserMailer.create_invite('me@example.com',\n                                     'friend@example.com', Time.now).deliver\n    assert_not ActionMailer::Base.deliveries.empty?\n\n    # Test the body of the sent email contains what we expect it to\n    assert_equal ['me@example.com'], email.from\n    assert_equal ['friend@example.com'], email.to\n    assert_equal 'You have been invited by me@example.com', email.subject\n    assert_equal read_fixture('invite').join, email.body.to_s\n  end\nend\n```\n\nIn the test we send the email and store the returned object in the `email`\nvariable. We then ensure that it was sent (the first assert), then, in the\nsecond batch of assertions, we ensure that the email does indeed contain what we\nexpect. The helper `read_fixture` is used to read in the content from this file.\n\nHere's the content of the `invite` fixture:\n\n```\nHi friend@example.com,\n\nYou have been invited.\n\nCheers!\n```\n\nThis is the right time to understand a little more about writing tests for your\nmailers. The line `ActionMailer::Base.delivery_method = :test` in\n`config/environments/test.rb` sets the delivery method to test mode so that\nemail will not actually be delivered (useful to avoid spamming your users while\ntesting) but instead it will be appended to an array\n(`ActionMailer::Base.deliveries`).\n\nNOTE: The `ActionMailer::Base.deliveries` array is only reset automatically in\n`ActionMailer::TestCase` tests. If you want to have a clean slate outside Action\nMailer tests, you can reset it manually with:\n`ActionMailer::Base.deliveries.clear`\n\n### Functional Testing\n\nFunctional testing for mailers involves more than just checking that the email body, recipients and so forth are correct. In functional mail tests you call the mail deliver methods and check that the appropriate emails have been appended to the delivery list. It is fairly safe to assume that the deliver methods themselves do their job. You are probably more interested in whether your own business logic is sending emails when you expect them to go out. For example, you can check that the invite friend operation is sending an email appropriately:\n\n```ruby\nrequire 'test_helper'\n\nclass UserControllerTest < ActionController::TestCase\n  test \"invite friend\" do\n    assert_difference 'ActionMailer::Base.deliveries.size', +1 do\n      post :invite_friend, email: 'friend@example.com'\n    end\n    invite_email = ActionMailer::Base.deliveries.last\n\n    assert_equal \"You have been invited by me@example.com\", invite_email.subject\n    assert_equal 'friend@example.com', invite_email.to[0]\n    assert_match(/Hi friend@example.com/, invite_email.body)\n  end\nend\n```\n\nTesting helpers\n---------------\n\nIn order to test helpers, all you need to do is check that the output of the\nhelper method matches what you'd expect. Tests related to the helpers are\nlocated under the `test/helpers` directory. Rails provides a generator which\ngenerates both the helper and the test file:\n\n```bash\n$ rails generate helper User\n      create  app/helpers/user_helper.rb\n      invoke  test_unit\n      create    test/helpers/user_helper_test.rb\n```\n\nThe generated test file contains the following code:\n\n```ruby\nrequire 'test_helper'\n\nclass UserHelperTest < ActionView::TestCase\nend\n```\n\nA helper is just a simple module where you can define methods which are\navailable into your views. To test the output of the helper's methods, you just\nhave to use a mixin like this:\n\n```ruby\nclass UserHelperTest < ActionView::TestCase\n  include UserHelper\n\n  test \"should return the user name\" do\n    # ...\n  end\nend\n```\n\nMoreover, since the test class extends from `ActionView::TestCase`, you have\naccess to Rails' helper methods such as `link_to` or `pluralize`.\n\nOther Testing Approaches\n------------------------\n\nThe built-in `test/unit` based testing is not the only way to test Rails applications. Rails developers have come up with a wide variety of other approaches and aids for testing, including:\n\n* [NullDB](http://avdi.org/projects/nulldb/), a way to speed up testing by avoiding database use.\n* [Factory Girl](https://github.com/thoughtbot/factory_girl/tree/master), a replacement for fixtures.\n* [Machinist](https://github.com/notahat/machinist/tree/master), another replacement for fixtures.\n* [Fixture Builder](https://github.com/rdy/fixture_builder), a tool that compiles Ruby factories into fixtures before a test run.\n* [MiniTest::Spec Rails](https://github.com/metaskills/minitest-spec-rails), use the MiniTest::Spec DSL within your rails tests.\n* [Shoulda](http://www.thoughtbot.com/projects/shoulda), an extension to `test/unit` with additional helpers, macros, and assertions.\n* [RSpec](http://relishapp.com/rspec), a behavior-driven development framework\n","markers":{"markers":{"1":{"id":1,"range":[[69,0],[69,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":198,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[4,0],[4,0]],"newRange":[[4,0],[4,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,1],[4,1]],"newRange":[[4,1],[4,2]],"oldText":"","newText":"ｋ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,2],[4,2]]},"newParams":{"range":[[4,1],[4,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,2]]},"newParams":{"tailed":false,"range":[[4,2],[4,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,2]],"newRange":[[4,1],[4,2]],"oldText":"ｋ","newText":"こ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,2],[4,2]]},"newParams":{"range":[[4,1],[4,2]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,2]]},"newParams":{"tailed":false,"range":[[4,2],[4,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,2]],"newRange":[[4,1],[4,3]],"oldText":"こ","newText":"こｋ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,3],[4,3]]},"newParams":{"range":[[4,1],[4,3]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,3]]},"newParams":{"tailed":false,"range":[[4,3],[4,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,3]],"newRange":[[4,1],[4,3]],"oldText":"こｋ","newText":"ここ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,3],[4,3]]},"newParams":{"range":[[4,1],[4,3]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,3]]},"newParams":{"tailed":false,"range":[[4,3],[4,3]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,3]],"newRange":[[4,1],[4,4]],"oldText":"ここ","newText":"ここｈ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,4],[4,4]]},"newParams":{"range":[[4,1],[4,4]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,4]]},"newParams":{"tailed":false,"range":[[4,4],[4,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,4]],"newRange":[[4,1],[4,4]],"oldText":"ここｈ","newText":"ここは","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,4],[4,4]]},"newParams":{"range":[[4,1],[4,4]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,1],[4,4]]},"newParams":{"tailed":false,"range":[[4,4],[4,4]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,4]],"newRange":[[4,1],[4,1]],"oldText":"ここは","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[4,1],[4,1]],"newRange":[[4,1],[4,4]],"oldText":"","newText":"ここは","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[4,4],[4,4]],"newRange":[[4,4],[4,5]],"oldText":"","newText":"ｋ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,5],[4,5]]},"newParams":{"range":[[4,4],[4,5]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,5]]},"newParams":{"tailed":false,"range":[[4,5],[4,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,5]],"newRange":[[4,4],[4,5]],"oldText":"ｋ","newText":"こ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,5],[4,5]]},"newParams":{"range":[[4,4],[4,5]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,5]]},"newParams":{"tailed":false,"range":[[4,5],[4,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,5]],"newRange":[[4,4],[4,6]],"oldText":"こ","newText":"こう","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,6],[4,6]]},"newParams":{"range":[[4,4],[4,6]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,6]]},"newParams":{"tailed":false,"range":[[4,6],[4,6]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,6]],"newRange":[[4,4],[4,7]],"oldText":"こう","newText":"こうｎ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,7],[4,7]]},"newParams":{"range":[[4,4],[4,7]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,7]]},"newParams":{"tailed":false,"range":[[4,7],[4,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,7]],"newRange":[[4,4],[4,7]],"oldText":"こうｎ","newText":"こうな","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,7],[4,7]]},"newParams":{"range":[[4,4],[4,7]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,7]]},"newParams":{"tailed":false,"range":[[4,7],[4,7]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,7]],"newRange":[[4,4],[4,8]],"oldText":"こうな","newText":"こうなｒ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,8],[4,8]]},"newParams":{"range":[[4,4],[4,8]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,8]]},"newParams":{"tailed":false,"range":[[4,8],[4,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,8]],"newRange":[[4,4],[4,8]],"oldText":"こうなｒ","newText":"こうなり","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,8],[4,8]]},"newParams":{"range":[[4,4],[4,8]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,8]]},"newParams":{"tailed":false,"range":[[4,8],[4,8]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,8]],"newRange":[[4,4],[4,9]],"oldText":"こうなり","newText":"こうなりｍ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,9],[4,9]]},"newParams":{"range":[[4,4],[4,9]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,9]]},"newParams":{"tailed":false,"range":[[4,9],[4,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,9]],"newRange":[[4,4],[4,9]],"oldText":"こうなりｍ","newText":"こうなりま","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,9],[4,9]]},"newParams":{"range":[[4,4],[4,9]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,9]]},"newParams":{"tailed":false,"range":[[4,9],[4,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,9]],"newRange":[[4,4],[4,10]],"oldText":"こうなりま","newText":"こうなりまｓ","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,10],[4,10]]},"newParams":{"range":[[4,4],[4,10]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,10]]},"newParams":{"tailed":false,"range":[[4,10],[4,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,10]],"newRange":[[4,4],[4,10]],"oldText":"こうなりまｓ","newText":"こうなります","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,10],[4,10]]},"newParams":{"range":[[4,4],[4,10]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,10]]},"newParams":{"tailed":false,"range":[[4,10],[4,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,10]],"newRange":[[4,4],[4,10]],"oldText":"こうなります","newText":"こうなります","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[4,10],[4,10]]},"newParams":{"range":[[4,4],[4,10]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[4,4],[4,10]]},"newParams":{"tailed":false,"range":[[4,10],[4,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,10]],"newRange":[[4,4],[4,4]],"oldText":"こうなります","newText":"","normalizeLineEndings":{"undo":"skip"},"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"},{"oldRange":[[4,4],[4,4]],"newRange":[[4,4],[4,10]],"oldText":"","newText":"こうなります","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[6,1],[6,1]]},"newParams":{"reversed":true,"range":[[6,0],[6,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[6,0],[6,1]],"newRange":[[6,0],[6,0]],"oldText":">","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[5,0],[5,0]]},"newParams":{"range":[[4,10],[5,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[4,10],[5,0]],"newRange":[[4,10],[4,10]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[5,0],[5,0]],"newRange":[[5,0],[6,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[6,0],[6,0]],"newRange":[[6,0],[6,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,0],[11,0]],"newRange":[[11,0],[11,1]],"oldText":"","newText":">","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,1],[11,1]],"newRange":[[11,1],[11,2]],"oldText":"","newText":"j","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,2],[11,2]],"newRange":[[11,2],[11,3]],"oldText":"","newText":"j","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,3],[11,3]],"newRange":[[11,3],[11,4]],"oldText":"","newText":"j","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[11,4],[11,4]],"newRange":[[11,4],[12,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[12,0]],"oldText":"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/regonn/docrails/guides/source/testing.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"95c55ab0afdf4a6becfbc988ae2a0199053740cd","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"items":[{"id":93,"softTabs":true,"displayBuffer":{"id":94,"softWrap":false,"editorWidthInChars":55,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/regonn/docrails/guides/source/getting_started.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":198,"softTabs":true,"displayBuffer":{"id":199,"softWrap":false,"editorWidthInChars":60,"scrollTop":1097,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/regonn/docrails/guides/source/testing.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/regonn/docrails/guides/source/getting_started.md","focused":true,"active":true,"deserializer":"Pane"},{"items":[{"deserializer":"MarkdownPreviewView","filePath":"/Users/regonn/docrails/guides/source/testing.md","editorId":"198"}],"activeItemUri":"markdown-preview://editor/198","focused":false,"active":false,"deserializer":"Pane"}],"orientation":"horizontal","deserializer":"PaneAxis"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/regonn/docrails/guides/source/getting_started.md":1400328040463,"/Users/regonn/docrails/guides/source/testing.md":1400322148766},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":6304815},"tree-view":{"directoryExpansionStates":{"guides":{"source":{}}},"selectedPath":"/Users/regonn/docrails/guides/source/getting_started.md","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":1135,"width":200},"find-and-replace":{"viewState":{"findHistory":["david:"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}